<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ReimuWang&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-10-04T05:58:19.794Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>王艺凯</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Mybatis-全局配置文件</title>
    <link href="http://yoursite.com/2018/10/04/Mybatis-%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2018/10/04/Mybatis-全局配置文件/</id>
    <published>2018-10-04T05:41:08.000Z</published>
    <updated>2018-10-04T05:58:19.794Z</updated>
    
    <content type="html"><![CDATA[<p>要求不高的话，SqlMapConfig.xml可以是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE configuration PUBLIC</span><br><span class="line">  &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">  &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">    &lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">      &lt;transactionManager type=&quot;JDBC&quot; /&gt;</span><br><span class="line">      &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;&quot; /&gt;</span><br><span class="line">      &lt;/dataSource&gt;</span><br><span class="line">    &lt;/environment&gt;</span><br><span class="line">  &lt;/environments&gt;</span><br><span class="line">  &lt;mappers&gt;</span><br><span class="line">    &lt;mapper resource=&quot;mybatis/mapper/UserMapper.xml&quot; /&gt;</span><br><span class="line">  &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><p>事实上，这只是configuration标签中的很少的一部分。如果按顺序列出的话，configuration中可以配置如下标签：</p><ul><li>properties(属性)</li><li>settings(全局配置参数)</li><li>typeAliases(类型别名)</li><li>typeHandlers(类型处理器)</li><li>objectFactory(对象工厂)</li><li>objectWrapperFactory</li><li>reflectorFactory</li><li>plugins(插件)</li><li>environments(环境集合属性对象)</li><li>databaseIdProvider</li><li>mappers(映射器)</li></ul><p>每个标签又可包含子标签，例如environments中有environment(环境子属性对象)，而environment中又包含transactionManager(事务管理)及dataSource(数据源)。</p><p>通常来说，配置文件中的标签是无序的，不过Mybatis的DTD特地约束了顺序。如果我们违背这个顺序，例如我们这样写上文的SqlMapConfig.xml：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE configuration PUBLIC</span><br><span class="line">  &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">  &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;mappers&gt;</span><br><span class="line">    &lt;mapper resource=&quot;mybatis/mapper/UserMapper.xml&quot; /&gt;</span><br><span class="line">  &lt;/mappers&gt;</span><br><span class="line">  &lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">    &lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">      &lt;transactionManager type=&quot;JDBC&quot; /&gt;</span><br><span class="line">      &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;&quot; /&gt;</span><br><span class="line">      &lt;/dataSource&gt;</span><br><span class="line">    &lt;/environment&gt;</span><br><span class="line">  &lt;/environments&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>此时就会报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">The content of element type &quot;configuration&quot; must match </span><br><span class="line"> &quot;(properties?,settings?,typeAliases?,typeHandlers?,objectFactory?,objectWrapperFactory?,reflectorFactory?,plugins?,environments?,databaseIdProvider?,mappers?)&quot;.</span><br></pre></td></tr></table></figure><p>下面我们就来逐个介绍这些标签。</p><h1 id="properties"><a href="#properties" class="headerlink" title="properties"></a>properties</h1><p>properties标签中有两个属性：resource及url。通常我们都会使用前者，它的作用是加载classpath下的属性文件(url自然就是加载网络中的属性文件咯)。</p><p>我们再来看下上文的SqlMapConfig.xml：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE configuration PUBLIC</span><br><span class="line">  &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">  &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;mappers&gt;</span><br><span class="line">    &lt;mapper resource=&quot;mybatis/mapper/UserMapper.xml&quot; /&gt;</span><br><span class="line">  &lt;/mappers&gt;</span><br><span class="line">  &lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">    &lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">      &lt;transactionManager type=&quot;JDBC&quot; /&gt;</span><br><span class="line">      &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;&quot; /&gt;</span><br><span class="line">      &lt;/dataSource&gt;</span><br><span class="line">    &lt;/environment&gt;</span><br><span class="line">  &lt;/environments&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>此时，我们把dataSource的连接字段直接写在了SqlMapConfig.xml中。显然，在需要替换数据源的场合，这很不方便。因此我们就可以将dataSource提取为单独的properties文件，而后再由properties标签加载，这样就完成了主配置文件与配置细节的解耦。其他需灵活配置的地方也同理。例如，我们创建了properties文件db.properties:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driver=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=</span><br></pre></td></tr></table></figure><p>此时，SqlMapConfig.xml就可以这样写了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE configuration PUBLIC</span><br><span class="line">  &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">  &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;properties resource=&quot;mybatis/db.properties&quot;&gt;&lt;/properties&gt;</span><br><span class="line">  &lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">    &lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">      &lt;transactionManager type=&quot;JDBC&quot; /&gt;</span><br><span class="line">      &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;driver&quot; value=&quot;$&#123;jdbc.driver&#125;&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot; /&gt;</span><br><span class="line">      &lt;/dataSource&gt;</span><br><span class="line">    &lt;/environment&gt;</span><br><span class="line">  &lt;/environments&gt;</span><br><span class="line">  &lt;mappers&gt;</span><br><span class="line">    &lt;mapper resource=&quot;mybatis/mapper/UserMapper.xml&quot; /&gt;</span><br><span class="line">  &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>对于dataSource这种相对完整的数据集合而言，最好还是要单独提取出properties文件的。不过，如果属性相对简单，换句话说，不值得单独提取为文件，也可以直接写在properties标签内部：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE configuration PUBLIC</span><br><span class="line">  &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">  &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;properties resource=&quot;mybatis/db.properties&quot;&gt;</span><br><span class="line">    &lt;property name=&quot;mapperpath.user&quot; value=&quot;mybatis/mapper/UserMapper.xml&quot;/&gt;</span><br><span class="line">  &lt;/properties&gt;</span><br><span class="line">  &lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">    &lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">      &lt;transactionManager type=&quot;JDBC&quot; /&gt;</span><br><span class="line">      &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;driver&quot; value=&quot;$&#123;jdbc.driver&#125;&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;url&quot; value=&quot;$&#123;jdbc.url&#125;&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;$&#123;jdbc.username&#125;&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;$&#123;jdbc.password&#125;&quot; /&gt;</span><br><span class="line">      &lt;/dataSource&gt;</span><br><span class="line">    &lt;/environment&gt;</span><br><span class="line">  &lt;/environments&gt;</span><br><span class="line">  &lt;mappers&gt;</span><br><span class="line">    &lt;mapper resource=&quot;$&#123;mapperpath.user&#125;&quot; /&gt;</span><br><span class="line">  &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><p>如上例所示，我们将UserMapper.xml的路径放到了属性中。这样来看，properties可以理解为SqlMapConfig.xml的常量配置仓库。将可能会发生变化的常量集中在properties属性中显然是一个很好的习惯。</p><p>下面是一个老生常谈的问题，properties标签内部的key与resource/url中加载的key重名了怎么办？</p><p>Mybatis是这样处理的：</p><ol><li>首先读取properties标签内部的key</li><li>而后读取resource/url中加载的key，它会覆盖已有同名属性</li><li>最后，若mapper.xml配置文件中statement中的parameterType是pojo类型，那么它内部的值也会被读入，并覆盖同名属性</li></ol><p>不得不说，这其实是挺坑爹的。因为从逻辑上来说，前两项属于系统配置，而第三项是具体的一次SQL查询，二者是不应放在一起的。不过，因为3会覆盖前两项，所以即便重名，每次SQL查询还是优先会取3中的值，因此通常不会有什么问题。</p><p>不过，对于这种放在一起的做法，我们还是很容易就会想到一些问题，假如SqlMapConfig.xml中有属性名为a，而某次statement的parameterType是pojo，且其中同样有名为a的属性。在a不为null时没什么好说的，那么如果该pojo中的a为null呢？会传入SqlMapConfig.xml中的属性a吗？</p><p>答案是不会。传入的依然会是null。</p><p>进一步的，如果pojo中没有属性a，而statement中的SQL误写了属性a，那么此时会传入SqlMapConfig.xml中的a吗？</p><p>答案依然是否定的，此时会报错，告知pojo中没有a。</p><p>因此，虽然这种将配置参数与请求参数混合的做法很坑爹，但是Mybatis还是做了相应的容错的，大家依然可以放心使用。不过为了逻辑上的顺畅，还是建议大家在定义properties用到的key时，起名特殊一些，最好一眼就能看出是配置文件中的参数。</p><h1 id="settings"><a href="#settings" class="headerlink" title="settings"></a>settings</h1><p>如果我们将使用Mybatis的程序看作一个普通的软件的话，那么settings就是在配置该软件全局的运行参数。如果不加设定，会取用某个默认值。</p><p>Mybatis的前身，ibatis的settings中包含了很多性能参数(最大线程数，最长等待时间等)，而Mybatis的settings中移除了这些参数，相关性能调优会由Mybatis自动完成。</p><h1 id="typeAliases"><a href="#typeAliases" class="headerlink" title="typeAliases"></a>typeAliases</h1><p>有的时候mapper配置文件中parameterType/resultType指定的类型会很长(例如com.day1_9.user.pojo.UserPojo)，反复书写的话会很不方便。而且同时在多个statement中硬编码也不利于类型全限定名变更时的维护。此时就需要别名登场啦。</p><p>Mybatis定义了很多默认的别名：</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;要求不高的话，SqlMapConfig.xml可以是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;!DOCTYPE configuration PUBLIC&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;-//mybatis.org//DTD Config 3.0//EN&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;quot;http://mybatis.org/dtd/mybatis-3-config.dtd&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;environments default=&amp;quot;development&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;environment id=&amp;quot;development&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;transactionManager type=&amp;quot;JDBC&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;dataSource type=&amp;quot;POOLED&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;property name=&amp;quot;driver&amp;quot; value=&amp;quot;com.mysql.jdbc.Driver&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;property name=&amp;quot;url&amp;quot; value=&amp;quot;jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;property name=&amp;quot;username&amp;quot; value=&amp;quot;root&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;lt;property name=&amp;quot;password&amp;quot; value=&amp;quot;&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      &amp;lt;/dataSource&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;/environment&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;/environments&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;mappers&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;lt;mapper resource=&amp;quot;mybatis/mapper/UserMapper.xml&amp;quot; /&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;/mappers&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Mybatis" scheme="http://yoursite.com/categories/Mybatis/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis-DAO开发方式</title>
    <link href="http://yoursite.com/2018/10/04/Mybatis-DAO%E5%BC%80%E5%8F%91%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/10/04/Mybatis-DAO开发方式/</id>
    <published>2018-10-04T04:58:08.000Z</published>
    <updated>2018-10-04T05:08:02.231Z</updated>
    
    <content type="html"><![CDATA[<p>在<a href="/2018/10/04/Mybatis-原始开发方式/">Mybatis-原始开发方式</a>的基础上，我们引入通用的DAO(Data Access Object)开发方式，此时DAO接口及DAO实现均需程序员编写。</p><a id="more"></a><h1 id="DAO接口"><a href="#DAO接口" class="headerlink" title="DAO接口"></a>DAO接口</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">package com.user.dao;</span><br><span class="line"></span><br><span class="line">import com.user.pojo.UserPojo;</span><br><span class="line"></span><br><span class="line">public interface UserDao &#123;</span><br><span class="line">    UserPojo selectById(int id) throws Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="DAO实现"><a href="#DAO实现" class="headerlink" title="DAO实现"></a>DAO实现</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">package com.user.dao;</span><br><span class="line"></span><br><span class="line">import org.apache.ibatis.session.SqlSession;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"></span><br><span class="line">import com.user.pojo.UserPojo;</span><br><span class="line"></span><br><span class="line">public class UserDaoImpl implements UserDao &#123;</span><br><span class="line"></span><br><span class="line">    private SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    public UserDaoImpl(SqlSessionFactory sqlSessionFactory) &#123;</span><br><span class="line">        this.sqlSessionFactory = sqlSessionFactory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public UserPojo selectById(int id) &#123;</span><br><span class="line">        SqlSession sqlSession = null;</span><br><span class="line">        UserPojo userPojo = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            sqlSession = this.sqlSessionFactory.openSession();</span><br><span class="line">            userPojo = sqlSession.selectOne(&quot;loveReimu.selectById&quot;, id);</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            if (null != sqlSession) sqlSession.close(); </span><br><span class="line">        &#125;</span><br><span class="line">        return userPojo;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">package com;</span><br><span class="line"></span><br><span class="line">import org.apache.ibatis.io.Resources;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line">import org.junit.Before;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.user.dao.UserDaoImpl;</span><br><span class="line"></span><br><span class="line">public class MybatisTest &#123;</span><br><span class="line"></span><br><span class="line">    private SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    @Before</span><br><span class="line">    public void init() throws Exception &#123;</span><br><span class="line">        this.sqlSessionFactory = new SqlSessionFactoryBuilder().build(Resources.getResourceAsStream(&quot;mybatis/SqlMapConfig.xml&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void selectById() &#123;</span><br><span class="line">        System.out.println(JSON.toJSONString(new UserDaoImpl(this.sqlSessionFactory).selectById(2)));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在&lt;a href=&quot;/2018/10/04/Mybatis-原始开发方式/&quot;&gt;Mybatis-原始开发方式&lt;/a&gt;的基础上，我们引入通用的DAO(Data Access Object)开发方式，此时DAO接口及DAO实现均需程序员编写。&lt;/p&gt;
    
    </summary>
    
      <category term="Mybatis" scheme="http://yoursite.com/categories/Mybatis/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis-原始开发方式</title>
    <link href="http://yoursite.com/2018/10/04/Mybatis-%E5%8E%9F%E5%A7%8B%E5%BC%80%E5%8F%91%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/10/04/Mybatis-原始开发方式/</id>
    <published>2018-10-04T03:27:08.000Z</published>
    <updated>2018-10-04T05:40:48.349Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h1><p>在此只给出欲使用Mybatis的依赖的最小集：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;junit&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;junit&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;4.12&lt;/version&gt;</span><br><span class="line">  &lt;scope&gt;test&lt;/scope&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.slf4j&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;slf4j-log4j12&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;1.7.25&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;mysql&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;5.1.43&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.mybatis&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;mybatis&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;3.4.4&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;asm&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;asm&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;3.3.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;cglib&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;cglib&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;3.2.5&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.javassist&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;javassist&lt;/artifactId&gt;</span><br><span class="line">  &lt;version&gt;3.21.0-GA&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><a id="more"></a><h1 id="全局配置文件"><a href="#全局配置文件" class="headerlink" title="全局配置文件"></a>全局配置文件</h1><p>遵循<a href="/2018/10/04/Mybatis-概述/">Mybatis-概述</a>的建议，我们将全局配置文件命名为SqlMapConfig.xml：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE configuration PUBLIC</span><br><span class="line">  &quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span><br><span class="line">  &quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;&gt;</span><br><span class="line">&lt;configuration&gt;</span><br><span class="line">  &lt;!-- 环境配置，与Spring整合后，环境配置将交由Spring管理，彼时environments标签废弃 --&gt;</span><br><span class="line">  &lt;environments default=&quot;development&quot;&gt;</span><br><span class="line">    &lt;environment id=&quot;development&quot;&gt;</span><br><span class="line">      &lt;transactionManager type=&quot;JDBC&quot; /&gt;</span><br><span class="line">      &lt;dataSource type=&quot;POOLED&quot;&gt;</span><br><span class="line">        &lt;property name=&quot;driver&quot; value=&quot;com.mysql.jdbc.Driver&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;url&quot; value=&quot;jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;username&quot; value=&quot;root&quot; /&gt;</span><br><span class="line">        &lt;property name=&quot;password&quot; value=&quot;&quot; /&gt;</span><br><span class="line">      &lt;/dataSource&gt;</span><br><span class="line">    &lt;/environment&gt;</span><br><span class="line">  &lt;/environments&gt;</span><br><span class="line">  &lt;mappers&gt;</span><br><span class="line">    &lt;mapper resource=&quot;mybatis/mapper/UserMapper.xml&quot; /&gt;</span><br><span class="line">  &lt;/mappers&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><h1 id="mapper配置文件"><a href="#mapper配置文件" class="headerlink" title="mapper配置文件"></a>mapper配置文件</h1><p>遵循<a href="2018/10/04/Mybatis-概述/">Mybatis-概述</a>的建议，我们将mapper配置文件命名为UserMapper.xml(本示例只需操作一张表，因此mapper配置文件仅有一个)：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE mapper PUBLIC &quot;-//mybatis.org//DTD Mapper 3.0//EN&quot; &quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;&gt;</span><br><span class="line">&lt;!-- namespace为命名空间，其作用为分类管理SQL语句 --&gt;</span><br><span class="line">&lt;!-- 只要不重名，namespace可随意命名。不过使用mapper代理开发方式后，namespace必须与Mapper接口同名 --&gt;</span><br><span class="line">&lt;mapper namespace=&quot;loveReimu&quot;&gt;</span><br><span class="line">  &lt;!-- namespace+id唯一标识一个statement --&gt;</span><br><span class="line">  &lt;select id=&quot;selectById&quot; parameterType=&quot;int&quot; resultType=&quot;com.user.pojo.UserPojo&quot;&gt;</span><br><span class="line">    select * from user where id= #&#123;id&#125;</span><br><span class="line">  &lt;/select&gt;</span><br><span class="line">  &lt;select id=&quot;selectByName&quot; parameterType=&quot;String&quot; resultType=&quot;com.user.pojo.UserPojo&quot;&gt;</span><br><span class="line">    select * from user where name like &apos;$&#123;value&#125;%&apos;</span><br><span class="line">  &lt;/select&gt;</span><br><span class="line">  &lt;insert id=&quot;insert&quot; parameterType=&quot;com.user.pojo.UserPojo&quot;&gt;</span><br><span class="line">    &lt;selectKey keyProperty=&quot;id&quot; order=&quot;AFTER&quot; resultType=&quot;int&quot;&gt;</span><br><span class="line">      select last_insert_id()</span><br><span class="line">    &lt;/selectKey&gt;</span><br><span class="line">    insert into user(name,create_time) values(#&#123;name&#125;,#&#123;create_time&#125;)</span><br><span class="line">  &lt;/insert&gt;</span><br><span class="line">  &lt;delete id=&quot;delete&quot; parameterType=&quot;int&quot;&gt;</span><br><span class="line">    delete from user where id=#&#123;id&#125;</span><br><span class="line">  &lt;/delete&gt;</span><br><span class="line">  &lt;update id=&quot;update&quot; parameterType=&quot;com.user.pojo.UserPojo&quot;&gt;</span><br><span class="line">    update user set name=#&#123;name&#125;,create_time=#&#123;create_time&#125; where id=#&#123;id&#125;</span><br><span class="line">  &lt;/update&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure><p>正常写SQL脚本时可在SQL的末尾加上分号以分割。Mybatis不支持SQl后加分号。</p><hr><p>基本单位为statement，即一个select/insert/delete/update。可以认为每个statement都封装了一条SQL语句。其内部会通过parameterType完成输入映射；通过resultType完成输出映射。</p><hr><p>#{}表示一个占位符。它会自动进行Java类型向JDBC类型值的转换。例如传入一个字符串，实际执行时会自动在两边加单引号。再比如传入一个字符串类型的参数至数据库中的datetime类型，mysql会自动将其转换为日期类型(Oricle不支持该功能，传入时就必须传入日期类型)。</p><p>${}表示SQL的拼接符。它类似于#{}，不同之处在于不会自动进行Java类型向JDBC类型值的转换，即实际执行时维持原值。此时PreparedStatement的防注入功能失效。</p><hr><p>#{}或${}接收pojo类型的parameterType时，会使用OGNL以对象导航图的方式解析pojo的属性值。简单来说，就是可以一直.出所需参数值。例如parameterType传入的pojo类型为User，User中的sex属性同样为pojo类型。则若要取到sex中的real字段，则可用#{sex.real}。</p><hr><p>parameterType为传入参数类型，规定只能传入一个参数(因此如果想传入多个值的话，只能通过pojo的OGNL来保证了)。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parameterType=&quot;String&quot;</span><br></pre></td></tr></table></figure><p>也可写为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parameterType=&quot;string&quot;</span><br></pre></td></tr></table></figure><p>或：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">parameterType=&quot;java.lang.String&quot;</span><br></pre></td></tr></table></figure><hr><p>resultType为输出结果类型。无论查询结果返回的是一条或多条记录，resultType均指定单条记录映射的pojo或hashmap或Java简单类型等。若返回的是多条记录，Mybatis会自动将其封装为List。</p><hr><p>除parameterType外，还提供parameterMap配置输入参数类型(已过时，不推荐使用)。</p><p>除resultType外，还提供resultMap配置输出结果类型(未过时，仍推荐使用)完成复杂数据类型映射(例如一对多映射，多对多映射)</p><hr><p>本例中，insert标签中的selectKey类似于habernate的主键返回功能。作用为得到新插入数据自增的主键值(selectKey并不仅仅可以得到主键，这只是它的应用之一)。</p><p>Mysql中的last_insert_id()函数可获得刚插入的自增主键值。</p><p>selectKey标签中的属性：</p><ul><li>keyProperty：将查得的key赋给的属性名。</li><li>order：返回时机。AFTER即为在本条SQL执行完成后得到所需key值。</li><li>resultType：selectKey标签中的SQL语句的返回值类型。</li></ul><p>若所用数据库为Orical，因Orical没有自增主键查询函数，则需使用序列实现主键生成。</p><hr><p>若Mysql表中主键未设置自增，则可用uuid函数生成主键。此时生成的时机应为本条语句执行之前。并将生成的主键作为参数插入数据库中。<br>使用uuid函数的好处为可保证主键在数据库表合并时始终全局唯一。</p><p>此时的insert statement应这样写：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;insert id=&quot;insert&quot; parameterType=&quot;com.day1_5.user.pojo.UserPojo&quot;&gt;</span><br><span class="line">  &lt;selectKey keyProperty=&quot;id&quot; order=&quot;BEFORE&quot; resultType=&quot;string&quot;&gt;</span><br><span class="line">    select uuid()</span><br><span class="line">  &lt;/selectKey&gt;</span><br><span class="line">  insert into user2(id,name,create_time) values(#&#123;id&#125;,#&#123;name&#125;,#&#123;create_time&#125;)</span><br><span class="line">&lt;/insert&gt;</span><br></pre></td></tr></table></figure><p>注意：Mysql uuid()生成的id长度为36位，因此用于接收的varchar字段长度至少要为36。最后得到的id形如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">6f644312-3de7-11e7-910e-1002b501dff5</span><br></pre></td></tr></table></figure><h1 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line">package com;</span><br><span class="line"></span><br><span class="line">import java.util.Date;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import org.apache.ibatis.io.Resources;</span><br><span class="line">import org.apache.ibatis.session.SqlSession;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line">import org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line">import org.junit.Before;</span><br><span class="line">import org.junit.Test;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSON;</span><br><span class="line">import com.user.pojo.UserPojo;</span><br><span class="line"></span><br><span class="line">public class MybatisTest &#123;</span><br><span class="line"></span><br><span class="line">    private SqlSessionFactory sqlSessionFactory;</span><br><span class="line"></span><br><span class="line">    @Before</span><br><span class="line">    public void init() throws Exception &#123;</span><br><span class="line">        this.sqlSessionFactory = new SqlSessionFactoryBuilder().build(Resources.getResourceAsStream(&quot;mybatis/SqlMapConfig.xml&quot;));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void selectById() &#123;</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        UserPojo userPojo = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            userPojo = sqlSession.selectOne(&quot;loveReimu.selectById&quot;, 2);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(JSON.toJSONString(userPojo));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void selectByName() &#123;</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        List&lt;UserPojo&gt; userPojoList = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            userPojoList = sqlSession.selectList(&quot;loveReimu.selectByName&quot;, &quot;八云&quot;);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(JSON.toJSONString(userPojoList));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void insert() &#123;</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        UserPojo userPojo = new UserPojo();</span><br><span class="line">        userPojo.setName(&quot;八意永琳&quot;);</span><br><span class="line">        userPojo.setCreate_time(new Date());</span><br><span class="line">        try &#123;</span><br><span class="line">            // 该方法返回插入操作影响的记录数</span><br><span class="line">            sqlSession.insert(&quot;loveReimu.insert&quot;, userPojo);</span><br><span class="line">            sqlSession.commit();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">        // 因配置文件中设置了selectKey，userPojo中会填入新生成的自增主键值</span><br><span class="line">        System.out.println(JSON.toJSONString(userPojo));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void delete() &#123;</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        try &#123;</span><br><span class="line">            System.out.println(sqlSession.delete(&quot;loveReimu.delete&quot;, 1));</span><br><span class="line">            sqlSession.commit();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Test</span><br><span class="line">    public void update() &#123;</span><br><span class="line">        SqlSession sqlSession = sqlSessionFactory.openSession();</span><br><span class="line">        UserPojo userPojo = new UserPojo();</span><br><span class="line">        userPojo.setId(4);</span><br><span class="line">        userPojo.setName(&quot;蓬莱山辉夜&quot;);</span><br><span class="line">        userPojo.setCreate_time(new Date());</span><br><span class="line">        try &#123;</span><br><span class="line">            System.out.println(sqlSession.update(&quot;loveReimu.update&quot;, userPojo));</span><br><span class="line">            sqlSession.commit();</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            sqlSession.close();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们使用SqlSession操作数据库，它的生成过程为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SqlSessionFactoryBuilder - SqlSessionFactory - SqlSession</span><br></pre></td></tr></table></figure><p>其中SqlSessionFactoryBuilder与SqlSessionFactory通常均是单例的，而SqlSession则应与查询一一对应。这是为什么呢？我们不妨看一下SqlSession的类定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">package org.apache.ibatis.session;</span><br><span class="line"></span><br><span class="line">public interface SqlSession extends Closeable</span><br></pre></td></tr></table></figure><p>它有两个实现类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">package org.apache.ibatis.session.defaults;</span><br><span class="line"></span><br><span class="line">public class DefaultSqlSession implements SqlSession</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">package org.apache.ibatis.session;</span><br><span class="line"></span><br><span class="line">public class SqlSessionManager implements SqlSessionFactory, SqlSession</span><br></pre></td></tr></table></figure><p>其中DefaultSqlSession为默认的实现类，在该类中，有一个成员变量为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private Executor executor;</span><br></pre></td></tr></table></figure><p>即为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">package org.apache.ibatis.executor;</span><br><span class="line"></span><br><span class="line">public interface Executor</span><br></pre></td></tr></table></figure><p>SqlSession内部会调用Excutor接口操作数据库。它有两个实现：</p><p>默认执行器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">package org.apache.ibatis.executor;</span><br><span class="line"></span><br><span class="line">public abstract class BaseExecutor implements Executor</span><br></pre></td></tr></table></figure><p>缓存执行器：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">package org.apache.ibatis.executor;</span><br><span class="line"></span><br><span class="line">public class CachingExecutor implements Executor</span><br></pre></td></tr></table></figure><p>以默认执行器的某个子类(批量操作执行器)为例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">package org.apache.ibatis.executor;</span><br><span class="line"></span><br><span class="line">public class BatchExecutor extends BaseExecutor</span><br></pre></td></tr></table></figure><p>BatchExecutor有如下成员变量：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">private String currentSql;    // 封装SQL语句</span><br><span class="line">private MappedStatement currentStatement;    // 用于封装SQL的对象。其中有statement中定义的所有内容。</span><br></pre></td></tr></table></figure><p>MappedStatement类成员变量举例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">private String resource;</span><br><span class="line">private Configuration configuration;</span><br><span class="line">private String id;</span><br><span class="line">private Integer fetchSize;</span><br><span class="line">private Integer timeout;</span><br><span class="line">private StatementType statementType;</span><br><span class="line">private ResultSetType resultSetType;</span><br><span class="line">private SqlSource sqlSource;</span><br><span class="line">private Cache cache;</span><br><span class="line">private ParameterMap parameterMap;</span><br><span class="line">private List&lt;ResultMap&gt; resultMaps;</span><br><span class="line">private boolean flushCacheRequired;</span><br><span class="line">private boolean useCache;</span><br><span class="line">private boolean resultOrdered;</span><br><span class="line">private SqlCommandType sqlCommandType;</span><br><span class="line">private KeyGenerator keyGenerator;</span><br><span class="line">private String[] keyProperties;</span><br><span class="line">private String[] keyColumns;</span><br><span class="line">private boolean hasNestedResultMaps;</span><br><span class="line">private String databaseId;</span><br><span class="line">private Log statementLog;</span><br><span class="line">private LanguageDriver lang;</span><br><span class="line">private String[] resultSets;</span><br></pre></td></tr></table></figure><p>显然，SqlSession是线程不安全的。诸如currentSql这样的属性必须要与查询一一对应。</p><hr><p>selectById()方法在查询单条纪录时，调用了sqlSession.selectOne()方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;T&gt; T selectOne(String statement, Object parameter);</span><br></pre></td></tr></table></figure><p>selectByName()方法在查询多条纪录时，调用了sqlSession.selectList()方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;E&gt; List&lt;E&gt; selectList(String statement, Object parameter);</span><br></pre></td></tr></table></figure><p>这两个方法的第一个参数statement，均是mapper配置文件中namespace+id构成的唯一值。</p><p>selectOne()不能用于查询复数结果，会报错；反之，selectList()则可用于查询单条记录(可以认为list中只有一条记录)。</p><hr><p>与Spring整合后，诸如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlSession.commit();</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sqlSession.close();</span><br></pre></td></tr></table></figure><p>均可交由Spring管理。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;引入依赖&quot;&gt;&lt;a href=&quot;#引入依赖&quot; class=&quot;headerlink&quot; title=&quot;引入依赖&quot;&gt;&lt;/a&gt;引入依赖&lt;/h1&gt;&lt;p&gt;在此只给出欲使用Mybatis的依赖的最小集：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;groupId&amp;gt;junit&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;artifactId&amp;gt;junit&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;version&amp;gt;4.12&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;scope&amp;gt;test&amp;lt;/scope&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;groupId&amp;gt;org.slf4j&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;artifactId&amp;gt;slf4j-log4j12&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;version&amp;gt;1.7.25&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;groupId&amp;gt;mysql&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;artifactId&amp;gt;mysql-connector-java&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;version&amp;gt;5.1.43&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;groupId&amp;gt;org.mybatis&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;artifactId&amp;gt;mybatis&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;version&amp;gt;3.4.4&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;groupId&amp;gt;asm&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;artifactId&amp;gt;asm&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;version&amp;gt;3.3.1&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;groupId&amp;gt;cglib&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;artifactId&amp;gt;cglib&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;version&amp;gt;3.2.5&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;groupId&amp;gt;org.javassist&amp;lt;/groupId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;artifactId&amp;gt;javassist&amp;lt;/artifactId&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;lt;version&amp;gt;3.21.0-GA&amp;lt;/version&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Mybatis" scheme="http://yoursite.com/categories/Mybatis/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis-概述</title>
    <link href="http://yoursite.com/2018/10/04/Mybatis-%E6%A6%82%E8%BF%B0/"/>
    <id>http://yoursite.com/2018/10/04/Mybatis-概述/</id>
    <published>2018-10-04T02:52:08.000Z</published>
    <updated>2018-10-04T04:41:03.902Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mybatis简介"><a href="#Mybatis简介" class="headerlink" title="Mybatis简介"></a>Mybatis简介</h1><p>Mybatis因其较为灵活而流行，它的前身是Apache的开源项目ibatis。2010年ibatis被apache software foundation迁移至google code，改进后更名为Mybatis，目前Mybatis托管于github上。</p><p>Mybatis是一个持久层框架。使用Mybatis时，程序员只需要关注SQL本身而不需要关注使用JDBC时需进行的繁琐设置，Mybatis会将SQL很好的维护起来。它通过XML或注解的方式将要执行的各种statement(Statement、PreparedStatemnt、CallableStatement)配置起来，并通过Java对象和statement中的SQL进行映射生成最终执行的SQL语句，最后由Mybatis框架执行SQL并将结果映射成Java对象并返回。</p><p>无论如何，Java底层均使用JDBC操作关系型数据库，而Mybatis是对JDBC的封装，因此性能较之JDBC有所下降。</p><a id="more"></a><h1 id="Mybatis与Hibernate的区别"><a href="#Mybatis与Hibernate的区别" class="headerlink" title="Mybatis与Hibernate的区别"></a>Mybatis与Hibernate的区别</h1><p>区别主要用于项目技术选型。进行技术选型时，主要考虑以下两点：</p><ul><li>降低开发成本</li><li>提高系统稳定性</li></ul><p><strong>Mybatis</strong></p><ul><li>入门简单。程序容易上手开发，节省开发成本。</li><li>需要程序员自己编写SQL语句，是一个不完全的ORM框架(Object Relational Mapping，对象关系映射)，易于进行SQL的修改及优化。</li><li>适合开发需求变更频繁的项目。例如：互联网电商网站等互联网项目(讲究敏捷开发，高效)。</li></ul><p><strong>Hibernate</strong></p><ul><li>入门门槛较高。难以写出性能较高的程序(需要用到缓存技术，而且这些缓存技术已过时，现在讲究的是分布式缓存)。</li><li>无需写SQL语句，提倡面向对象，采用完全的标准ORM框架，无法优化SQL语句。若想优化SQL语句，则必须使用Hibernate写原生态SQL的方法，此时Hibernate的优势将不复存在，换句话说，此时已没有使用Hibernate的必要，可直接使用JDBC。</li><li>适合开发需求变更不大，对象数据模型稳定，中小型的项目。例如：企业OA(办公自动化，Office Automation)。</li></ul><h1 id="Mybatis架构"><a href="#Mybatis架构" class="headerlink" title="Mybatis架构"></a>Mybatis架构</h1><p>按照逐渐远离用户(程序员)的顺序，Mybatis架构的架构为：</p><p><strong>配置文件</strong></p><ul><li>1个全局配置文件：通常命名为SqlMapConfig.xml</li><li>复数个mapper.xml文件：配置具体查询某张表时的SQL。最初ibatis的命名规则为表名.xml。Mybatis不会限定命名，但建议命名为：表名+mapper.xml(即若引入mapper代理开发方式后，保持与mapper接口同名)</li></ul><p><strong>SqlSessionFactory</strong></p><p>创建SqlSession的会话工厂。</p><p><strong>SqlSession</strong></p><p>SqlSession是面向用户的接口(更直白的说，再往下的部分用户就不可见了)，接口中封装了操作数据库的方法。</p><p><strong>Excutor</strong></p><p>即为操作数据库的执行器接口，SqlSession内部调用Excutor操作数据库。Excutor接口有两个实现：</p><ul><li>默认执行器</li><li>缓存执行器</li></ul><p><strong>MappedStatement</strong></p><p>MappedStatement是Mybatis的底层封装对象，该对象封装了SQL语句。Excutor通过MappedStatement操作数据库。具体来说，MappedStatement接收输入映射传入的参数并将其封装为对象，而后Excutor调用该对象操作数据库，操作结束后通过输出映射生成结果对象。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Mybatis简介&quot;&gt;&lt;a href=&quot;#Mybatis简介&quot; class=&quot;headerlink&quot; title=&quot;Mybatis简介&quot;&gt;&lt;/a&gt;Mybatis简介&lt;/h1&gt;&lt;p&gt;Mybatis因其较为灵活而流行，它的前身是Apache的开源项目ibatis。2010年ibatis被apache software foundation迁移至google code，改进后更名为Mybatis，目前Mybatis托管于github上。&lt;/p&gt;
&lt;p&gt;Mybatis是一个持久层框架。使用Mybatis时，程序员只需要关注SQL本身而不需要关注使用JDBC时需进行的繁琐设置，Mybatis会将SQL很好的维护起来。它通过XML或注解的方式将要执行的各种statement(Statement、PreparedStatemnt、CallableStatement)配置起来，并通过Java对象和statement中的SQL进行映射生成最终执行的SQL语句，最后由Mybatis框架执行SQL并将结果映射成Java对象并返回。&lt;/p&gt;
&lt;p&gt;无论如何，Java底层均使用JDBC操作关系型数据库，而Mybatis是对JDBC的封装，因此性能较之JDBC有所下降。&lt;/p&gt;
    
    </summary>
    
      <category term="Mybatis" scheme="http://yoursite.com/categories/Mybatis/"/>
    
    
      <category term="Mybatis" scheme="http://yoursite.com/tags/Mybatis/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode Algorithms-104.Maximum Depth of Binary Tree</title>
    <link href="http://yoursite.com/2018/09/19/Leetcode%20Algorithms-104Maximum%20Depth%20of%20Binary%20Tree/"/>
    <id>http://yoursite.com/2018/09/19/Leetcode Algorithms-104Maximum Depth of Binary Tree/</id>
    <published>2018-09-19T02:46:43.000Z</published>
    <updated>2018-09-19T02:48:10.851Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题地址"><a href="#问题地址" class="headerlink" title="问题地址"></a>问题地址</h1><p><a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/description/" target="_blank" rel="noopener">Maximum Depth of Binary Tree - LeetCode</a></p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><img src="/images/blog_pic/Leetcode Algorithms/104Maximum Depth of Binary Tree/0.jpg" alt="0.jpg"></p><a id="more"></a><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">public class Solution &#123;</span><br><span class="line"></span><br><span class="line">    public int maxDepth(TreeNode root) &#123;</span><br><span class="line">        return null == root ? 0 : Math.max(maxDepth(root.left), maxDepth(root.right)) + 1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class TreeNode &#123;</span><br><span class="line">    int val;</span><br><span class="line">    TreeNode left;</span><br><span class="line">    TreeNode right;</span><br><span class="line">    TreeNode(int x) &#123; val = x; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题地址&quot;&gt;&lt;a href=&quot;#问题地址&quot; class=&quot;headerlink&quot; title=&quot;问题地址&quot;&gt;&lt;/a&gt;问题地址&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/maximum-depth-of-binary-tree/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Maximum Depth of Binary Tree - LeetCode&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/blog_pic/Leetcode Algorithms/104Maximum Depth of Binary Tree/0.jpg&quot; alt=&quot;0.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode Algorithms" scheme="http://yoursite.com/categories/Leetcode-Algorithms/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Algorithms" scheme="http://yoursite.com/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode Algorithms-101.Symmetric Tree</title>
    <link href="http://yoursite.com/2018/09/18/Leetcode%20Algorithms-101Symmetric%20Tree/"/>
    <id>http://yoursite.com/2018/09/18/Leetcode Algorithms-101Symmetric Tree/</id>
    <published>2018-09-18T09:21:43.000Z</published>
    <updated>2018-09-18T09:24:33.293Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题地址"><a href="#问题地址" class="headerlink" title="问题地址"></a>问题地址</h1><p><a href="https://leetcode.com/problems/symmetric-tree/description/" target="_blank" rel="noopener">Symmetric Tree - LeetCode</a></p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><img src="/images/blog_pic/Leetcode Algorithms/101Symmetric Tree/0.jpg" alt="0.jpg"></p><a id="more"></a><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">public class Solution &#123;</span><br><span class="line"></span><br><span class="line">    public boolean isSymmetric(TreeNode root) &#123;</span><br><span class="line">        return root == null || isSymmetricHelp(root.left, root.right);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private boolean isSymmetricHelp(TreeNode left, TreeNode right) &#123;</span><br><span class="line">        if(left == null || right == null) return left == right;</span><br><span class="line">        if(left.val != right.val) return false;</span><br><span class="line">        return isSymmetricHelp(left.left, right.right) &amp;&amp; isSymmetricHelp(left.right, right.left);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class TreeNode &#123;</span><br><span class="line">    int val;</span><br><span class="line">    TreeNode left;</span><br><span class="line">    TreeNode right;</span><br><span class="line">    TreeNode(int x) &#123; val = x; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题地址&quot;&gt;&lt;a href=&quot;#问题地址&quot; class=&quot;headerlink&quot; title=&quot;问题地址&quot;&gt;&lt;/a&gt;问题地址&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/symmetric-tree/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Symmetric Tree - LeetCode&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/blog_pic/Leetcode Algorithms/101Symmetric Tree/0.jpg&quot; alt=&quot;0.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode Algorithms" scheme="http://yoursite.com/categories/Leetcode-Algorithms/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Algorithms" scheme="http://yoursite.com/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode Algorithms-100.Same Tree</title>
    <link href="http://yoursite.com/2018/09/18/Leetcode%20Algorithms-100Same%20Tree/"/>
    <id>http://yoursite.com/2018/09/18/Leetcode Algorithms-100Same Tree/</id>
    <published>2018-09-18T07:10:43.000Z</published>
    <updated>2018-09-18T07:13:09.234Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题地址"><a href="#问题地址" class="headerlink" title="问题地址"></a>问题地址</h1><p><a href="https://leetcode.com/problems/same-tree/description/" target="_blank" rel="noopener">Same Tree - LeetCode</a></p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><img src="/images/blog_pic/Leetcode Algorithms/100Same Tree/0.jpg" alt="0.jpg"></p><a id="more"></a><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class Solution &#123;</span><br><span class="line"></span><br><span class="line">    public boolean isSameTree(TreeNode p, TreeNode q) &#123;</span><br><span class="line">        if (p == null &amp;&amp; q == null) return true;</span><br><span class="line">        if (p == null || q == null) return false;</span><br><span class="line">        if (p.val != q.val) return false;</span><br><span class="line">        return this.isSameTree(p.left, q.left) &amp;&amp; this.isSameTree(p.right, q.right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class TreeNode &#123;</span><br><span class="line">    int val;</span><br><span class="line">    TreeNode left;</span><br><span class="line">    TreeNode right;</span><br><span class="line">    TreeNode(int x) &#123; val = x; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题地址&quot;&gt;&lt;a href=&quot;#问题地址&quot; class=&quot;headerlink&quot; title=&quot;问题地址&quot;&gt;&lt;/a&gt;问题地址&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/same-tree/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Same Tree - LeetCode&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/blog_pic/Leetcode Algorithms/100Same Tree/0.jpg&quot; alt=&quot;0.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode Algorithms" scheme="http://yoursite.com/categories/Leetcode-Algorithms/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Algorithms" scheme="http://yoursite.com/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode Algorithms-88.Merge Sorted Array</title>
    <link href="http://yoursite.com/2018/09/18/Leetcode%20Algorithms-88Merge%20Sorted%20Array/"/>
    <id>http://yoursite.com/2018/09/18/Leetcode Algorithms-88Merge Sorted Array/</id>
    <published>2018-09-18T02:56:43.000Z</published>
    <updated>2018-09-18T03:04:26.245Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题地址"><a href="#问题地址" class="headerlink" title="问题地址"></a>问题地址</h1><p><a href="https://leetcode.com/problems/merge-sorted-array/description/" target="_blank" rel="noopener">Merge Sorted Array - LeetCode</a></p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><img src="/images/blog_pic/Leetcode Algorithms/88Merge Sorted Array/0.jpg" alt="0.jpg"></p><a id="more"></a><h1 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h1><p>正向迭代，此时需要顾虑nums1的长度变化情况，因此比较臃肿。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">public class Solution &#123;</span><br><span class="line"></span><br><span class="line">    public void merge(int[] nums1, int m, int[] nums2, int n) &#123;</span><br><span class="line">        int i1 = 0;</span><br><span class="line">        int lengthI1 = m; </span><br><span class="line">        int orginI1 = 0;</span><br><span class="line">        int i2 = 0;</span><br><span class="line">        while (orginI1 &lt; m &amp;&amp; i2 &lt; n) &#123;</span><br><span class="line">            if (nums2[i2] &gt;= nums1[i1]) orginI1++;</span><br><span class="line">            else &#123;</span><br><span class="line">                this.insert(nums2[i2], nums1, lengthI1, i1);</span><br><span class="line">                lengthI1++;</span><br><span class="line">                i2++;</span><br><span class="line">            &#125;</span><br><span class="line">            i1++;</span><br><span class="line">        &#125;</span><br><span class="line">        if (orginI1 == m)</span><br><span class="line">            for (int i = i2; i &lt; n; i++) nums1[i1++] = nums2[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private void insert(int value, int[] nums, int length, int index) &#123;</span><br><span class="line">        for (int i = length; i &gt; index; i--) nums[i] = nums[i - 1];</span><br><span class="line">        nums[index] = value;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h1><p>逆向迭代，看起来好多了。不过时间复杂度其实差不多。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">public class Solution &#123;</span><br><span class="line"></span><br><span class="line">    public void merge(int[] nums1, int m, int[] nums2, int n) &#123;</span><br><span class="line">        int i1 = m - 1;</span><br><span class="line">        int i2 = n - 1;</span><br><span class="line">        int now = m + n - 1;</span><br><span class="line">        while (i1 &gt; -1 &amp;&amp; i2 &gt; -1)</span><br><span class="line">            nums1[now--] = (nums1[i1] &gt; nums2[i2]) ? nums1[i1--] : nums2[i2--];</span><br><span class="line">        while (i2 &gt; -1) nums1[now--] = nums2[i2--];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题地址&quot;&gt;&lt;a href=&quot;#问题地址&quot; class=&quot;headerlink&quot; title=&quot;问题地址&quot;&gt;&lt;/a&gt;问题地址&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/merge-sorted-array/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Merge Sorted Array - LeetCode&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/blog_pic/Leetcode Algorithms/88Merge Sorted Array/0.jpg&quot; alt=&quot;0.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode Algorithms" scheme="http://yoursite.com/categories/Leetcode-Algorithms/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Algorithms" scheme="http://yoursite.com/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode Algorithms-83.Remove Duplicates from Sorted List</title>
    <link href="http://yoursite.com/2018/09/17/Leetcode%20Algorithms-83Remove%20Duplicates%20from%20Sorted%20List/"/>
    <id>http://yoursite.com/2018/09/17/Leetcode Algorithms-83Remove Duplicates from Sorted List/</id>
    <published>2018-09-17T11:11:43.000Z</published>
    <updated>2018-09-17T11:16:36.622Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题地址"><a href="#问题地址" class="headerlink" title="问题地址"></a>问题地址</h1><p><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list/description/" target="_blank" rel="noopener">Remove Duplicates from Sorted List - LeetCode</a></p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><img src="/images/blog_pic/Leetcode Algorithms/83Remove Duplicates from Sorted List/0.jpg" alt="0.jpg"></p><a id="more"></a><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><p>非递归：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">public class Solution &#123;</span><br><span class="line"></span><br><span class="line">    public ListNode deleteDuplicates(ListNode head) &#123;</span><br><span class="line">        if (null == head) return head;</span><br><span class="line">        ListNode tail = head;</span><br><span class="line">        ListNode now = head.next;</span><br><span class="line">        while (null != now) &#123;</span><br><span class="line">            if (tail.val != now.val) &#123;</span><br><span class="line">                tail.next = now;</span><br><span class="line">                tail = now;</span><br><span class="line">            &#125;</span><br><span class="line">            now = now.next;</span><br><span class="line">        &#125;</span><br><span class="line">        tail.next = null;</span><br><span class="line">        return head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ListNode &#123;</span><br><span class="line">    int val;</span><br><span class="line">    ListNode next;</span><br><span class="line">    ListNode(int x) &#123; val = x; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>递归：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Solution &#123;</span><br><span class="line"></span><br><span class="line">    public ListNode deleteDuplicates(ListNode head) &#123;</span><br><span class="line">        if(null == head || null == head.next) return head;</span><br><span class="line">        head.next = deleteDuplicates(head.next);</span><br><span class="line">        return head.val == head.next.val ? head.next : head;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ListNode &#123;</span><br><span class="line">    int val;</span><br><span class="line">    ListNode next;</span><br><span class="line">    ListNode(int x) &#123; val = x; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题地址&quot;&gt;&lt;a href=&quot;#问题地址&quot; class=&quot;headerlink&quot; title=&quot;问题地址&quot;&gt;&lt;/a&gt;问题地址&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/remove-duplicates-from-sorted-list/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Remove Duplicates from Sorted List - LeetCode&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/blog_pic/Leetcode Algorithms/83Remove Duplicates from Sorted List/0.jpg&quot; alt=&quot;0.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode Algorithms" scheme="http://yoursite.com/categories/Leetcode-Algorithms/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Algorithms" scheme="http://yoursite.com/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode Algorithms-70.Climbing Stairs</title>
    <link href="http://yoursite.com/2018/09/17/Leetcode%20Algorithms-70Climbing%20Stairs/"/>
    <id>http://yoursite.com/2018/09/17/Leetcode Algorithms-70Climbing Stairs/</id>
    <published>2018-09-17T10:37:43.000Z</published>
    <updated>2018-09-17T10:55:38.238Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题地址"><a href="#问题地址" class="headerlink" title="问题地址"></a>问题地址</h1><p><a href="https://leetcode.com/problems/climbing-stairs/description/" target="_blank" rel="noopener">Climbing Stairs - LeetCode</a></p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><img src="/images/blog_pic/Leetcode Algorithms/70Climbing Stairs/0.jpg" alt="0.jpg"></p><a id="more"></a><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><p>本题实际上就是一个斐波那契数列的变种，原始的斐波那契数列的定义为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">F(0)=0</span><br><span class="line">F(1)=1</span><br><span class="line">F(n)=F(n-1)+F(n-2) (n&gt;=2)</span><br></pre></td></tr></table></figure><p>即是一组这样的数:0,1,1,2,3,5,8…</p><p>本体并未改变斐波那契数列的根本特性(后一项是前两项的和)，只是拿掉了最初的两项，同时n也从1开始了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">F(1)=1</span><br><span class="line">F(2)=2</span><br><span class="line">F(n)=F(n-1)+F(n-2) (n&gt;=3)</span><br></pre></td></tr></table></figure><p>即是一组这样的数:1,2,3,5,8…</p><p>从最容易理解的角度来看，我们可以写出这样的递归代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">public class Solution &#123;</span><br><span class="line"></span><br><span class="line">    public int climbStairs(int n) &#123;</span><br><span class="line">        return n &lt;= 2 ? n : climbStairs(n - 2) + climbStairs(n - 1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过，这种解法的时间复杂度将达到恐怖的2^n。因为我们欲得到F(n)，则必须先得到F(n-1)及F(n-2)，依此类推。</p><p>因此，我们通常会采用如下时间复杂度为O(n)的解法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class Solution &#123;</span><br><span class="line"></span><br><span class="line">    public int climbStairs(int n) &#123;</span><br><span class="line">        if (n &lt;= 2) return n;</span><br><span class="line">        int first = 1;</span><br><span class="line">        int second = 2;</span><br><span class="line">        int now = 0;</span><br><span class="line">        for (int i = 3; i &lt;= n; i++) &#123;</span><br><span class="line">            now = first + second;</span><br><span class="line">            first = second;</span><br><span class="line">            second = now;</span><br><span class="line">        &#125;</span><br><span class="line">        return now;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题地址&quot;&gt;&lt;a href=&quot;#问题地址&quot; class=&quot;headerlink&quot; title=&quot;问题地址&quot;&gt;&lt;/a&gt;问题地址&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/climbing-stairs/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Climbing Stairs - LeetCode&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/blog_pic/Leetcode Algorithms/70Climbing Stairs/0.jpg&quot; alt=&quot;0.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode Algorithms" scheme="http://yoursite.com/categories/Leetcode-Algorithms/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Algorithms" scheme="http://yoursite.com/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode Algorithms-69.Sqrt(x)</title>
    <link href="http://yoursite.com/2018/09/17/Leetcode%20Algorithms-69Sqrtx/"/>
    <id>http://yoursite.com/2018/09/17/Leetcode Algorithms-69Sqrtx/</id>
    <published>2018-09-17T10:02:43.000Z</published>
    <updated>2018-09-17T10:09:41.533Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题地址"><a href="#问题地址" class="headerlink" title="问题地址"></a>问题地址</h1><p><a href="https://leetcode.com/problems/sqrtx/description/" target="_blank" rel="noopener">Sqrt(x) - LeetCode</a></p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><img src="/images/blog_pic/Leetcode Algorithms/69Sqrtx/0.jpg" alt="0.jpg"></p><a id="more"></a><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public class Solution &#123;</span><br><span class="line"></span><br><span class="line">    public int mySqrt(int x) &#123;</span><br><span class="line">        if (x &lt;= 1) return x;</span><br><span class="line">        int begin = 0;</span><br><span class="line">        int end = x;</span><br><span class="line">        while (begin &lt;= end) &#123;</span><br><span class="line">            int mid = begin + (end - begin) / 2;</span><br><span class="line">            int now = x / mid;</span><br><span class="line">            if (now == mid) return mid;</span><br><span class="line">            else if (now &gt; mid) &#123;</span><br><span class="line">                if (mid + 1 &gt; x / (mid + 1)) return mid;</span><br><span class="line">                else begin = mid + 1;</span><br><span class="line">            &#125; else end = mid - 1;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>显然，出题人不希望我们直接使用Math.sqrt()。</p><p>本解法是二分查找的变种，需要注意的是解法中使用了形如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int now = x / mid;</span><br></pre></td></tr></table></figure><p>的代码，其实更符合逻辑的思路应该是正向相乘：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int now = mid * mid;</span><br></pre></td></tr></table></figure><p>不过，这样会有溢出的风险，因此还是应该用题中除法的形式。</p><p>另外，0是不能做除数的，因此一开始的边界判断也一定要做好。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题地址&quot;&gt;&lt;a href=&quot;#问题地址&quot; class=&quot;headerlink&quot; title=&quot;问题地址&quot;&gt;&lt;/a&gt;问题地址&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/sqrtx/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Sqrt(x) - LeetCode&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/blog_pic/Leetcode Algorithms/69Sqrtx/0.jpg&quot; alt=&quot;0.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode Algorithms" scheme="http://yoursite.com/categories/Leetcode-Algorithms/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Algorithms" scheme="http://yoursite.com/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode Algorithms-67.Add Binary</title>
    <link href="http://yoursite.com/2018/09/17/Leetcode%20Algorithms-67Add%20Binary/"/>
    <id>http://yoursite.com/2018/09/17/Leetcode Algorithms-67Add Binary/</id>
    <published>2018-09-17T08:59:43.000Z</published>
    <updated>2018-09-17T09:01:57.467Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题地址"><a href="#问题地址" class="headerlink" title="问题地址"></a>问题地址</h1><p><a href="https://leetcode.com/problems/add-binary/description/" target="_blank" rel="noopener">Add Binary - LeetCode</a></p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><img src="/images/blog_pic/Leetcode Algorithms/67Add Binary/0.jpg" alt="0.jpg"></p><a id="more"></a><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">public class Solution &#123;</span><br><span class="line"></span><br><span class="line">    public String addBinary(String a, String b) &#123;</span><br><span class="line">        if (null == a || a.length() == 0) return b;</span><br><span class="line">        if (null == b || b.length() == 0) return a;</span><br><span class="line">        StringBuilder sb = new StringBuilder();</span><br><span class="line">        int ia = a.length() - 1;</span><br><span class="line">        int ib = b.length() - 1;</span><br><span class="line">        boolean mark = false;</span><br><span class="line">        while (ia &gt;= 0 || ib &gt;= 0) &#123;</span><br><span class="line">            char ta = ia &gt;= 0 ? a.charAt(ia) : &apos;0&apos;;</span><br><span class="line">            char tb = ib &gt;= 0 ? b.charAt(ib) : &apos;0&apos;;</span><br><span class="line">            if (ta == &apos;0&apos; &amp;&amp; tb == &apos;0&apos;) &#123;</span><br><span class="line">                if (mark) sb.append(&apos;1&apos;);</span><br><span class="line">                else sb.append(&apos;0&apos;);</span><br><span class="line">                mark = false;</span><br><span class="line">            &#125; else if (ta == &apos;1&apos; &amp;&amp; tb == &apos;1&apos;) &#123;</span><br><span class="line">                if (mark) sb.append(&apos;1&apos;);</span><br><span class="line">                else sb.append(&apos;0&apos;);</span><br><span class="line">                mark = true;</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                if (mark) sb.append(&apos;0&apos;);</span><br><span class="line">                else sb.append(&apos;1&apos;);</span><br><span class="line">            &#125;</span><br><span class="line">            ia--;</span><br><span class="line">            ib--;</span><br><span class="line">        &#125;</span><br><span class="line">        if (mark) sb.append(&apos;1&apos;);</span><br><span class="line">        return sb.reverse().toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题地址&quot;&gt;&lt;a href=&quot;#问题地址&quot; class=&quot;headerlink&quot; title=&quot;问题地址&quot;&gt;&lt;/a&gt;问题地址&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/add-binary/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Add Binary - LeetCode&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/blog_pic/Leetcode Algorithms/67Add Binary/0.jpg&quot; alt=&quot;0.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode Algorithms" scheme="http://yoursite.com/categories/Leetcode-Algorithms/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Algorithms" scheme="http://yoursite.com/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode Algorithms-66.Plus One</title>
    <link href="http://yoursite.com/2018/09/17/Leetcode%20Algorithms-66Plus%20One/"/>
    <id>http://yoursite.com/2018/09/17/Leetcode Algorithms-66Plus One/</id>
    <published>2018-09-17T08:24:43.000Z</published>
    <updated>2018-09-17T08:26:44.315Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题地址"><a href="#问题地址" class="headerlink" title="问题地址"></a>问题地址</h1><p><a href="https://leetcode.com/problems/plus-one/description/" target="_blank" rel="noopener">Plus One - LeetCode</a></p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><img src="/images/blog_pic/Leetcode Algorithms/66Plus One/0.jpg" alt="0.jpg"></p><a id="more"></a><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class Solution &#123;</span><br><span class="line"></span><br><span class="line">    public int[] plusOne(int[] digits) &#123;</span><br><span class="line">        if (null == digits || digits.length == 0) return digits;</span><br><span class="line">        int now = digits.length - 1;</span><br><span class="line">        while (now &gt;= 0) &#123;</span><br><span class="line">            if (digits[now] != 9) &#123;</span><br><span class="line">                digits[now]++;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            digits[now--] = 0;</span><br><span class="line">        &#125;</span><br><span class="line">        if (now == -1) &#123;</span><br><span class="line">            int[] result = new int[digits.length + 1];</span><br><span class="line">            result[0] = 1;</span><br><span class="line">            for (int i = 0; i &lt; digits.length; i++) result[i + 1] = digits[i];</span><br><span class="line">            return result;</span><br><span class="line">        &#125;</span><br><span class="line">        return digits;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题地址&quot;&gt;&lt;a href=&quot;#问题地址&quot; class=&quot;headerlink&quot; title=&quot;问题地址&quot;&gt;&lt;/a&gt;问题地址&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/plus-one/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Plus One - LeetCode&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/blog_pic/Leetcode Algorithms/66Plus One/0.jpg&quot; alt=&quot;0.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode Algorithms" scheme="http://yoursite.com/categories/Leetcode-Algorithms/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Algorithms" scheme="http://yoursite.com/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode Algorithms-58.Length of Last Word</title>
    <link href="http://yoursite.com/2018/09/17/Leetcode%20Algorithms-58Length%20of%20Last%20Word/"/>
    <id>http://yoursite.com/2018/09/17/Leetcode Algorithms-58Length of Last Word/</id>
    <published>2018-09-17T07:59:43.000Z</published>
    <updated>2018-09-17T08:01:27.439Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题地址"><a href="#问题地址" class="headerlink" title="问题地址"></a>问题地址</h1><p><a href="https://leetcode.com/problems/length-of-last-word/description/" target="_blank" rel="noopener">Length of Last Word - LeetCode</a></p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><img src="/images/blog_pic/Leetcode Algorithms/58Length of Last Word/0.jpg" alt="0.jpg"></p><a id="more"></a><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public class Solution &#123;</span><br><span class="line"></span><br><span class="line">    public int lengthOfLastWord(String s) &#123;</span><br><span class="line">        if (null == s || s.length() == 0) return 0;</span><br><span class="line">        String[] a = s.split(&quot; &quot;);</span><br><span class="line">        return a.length == 0 ? 0 : a[a.length - 1].length();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题地址&quot;&gt;&lt;a href=&quot;#问题地址&quot; class=&quot;headerlink&quot; title=&quot;问题地址&quot;&gt;&lt;/a&gt;问题地址&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/length-of-last-word/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Length of Last Word - LeetCode&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/blog_pic/Leetcode Algorithms/58Length of Last Word/0.jpg&quot; alt=&quot;0.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode Algorithms" scheme="http://yoursite.com/categories/Leetcode-Algorithms/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Algorithms" scheme="http://yoursite.com/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode Algorithms-53.Maximum Subarray</title>
    <link href="http://yoursite.com/2018/09/17/Leetcode%20Algorithms-53Maximum%20Subarray/"/>
    <id>http://yoursite.com/2018/09/17/Leetcode Algorithms-53Maximum Subarray/</id>
    <published>2018-09-17T03:04:43.000Z</published>
    <updated>2018-09-17T07:47:59.079Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题地址"><a href="#问题地址" class="headerlink" title="问题地址"></a>问题地址</h1><p><a href="https://leetcode.com/problems/maximum-subarray/description/" target="_blank" rel="noopener">Maximum Subarray - LeetCode</a></p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><img src="/images/blog_pic/Leetcode Algorithms/53Maximum Subarray/0.jpg" alt="0.jpg"></p><a id="more"></a><h1 id="解法1"><a href="#解法1" class="headerlink" title="解法1"></a>解法1</h1><p>最为笨拙的暴力穷举解法，时间复杂度O(n2)。</p><p><strong>代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class Solution &#123;</span><br><span class="line"></span><br><span class="line">    public int maxSubArray(int[] nums) &#123;</span><br><span class="line">        if (null == nums || nums.length == 0) return 0;</span><br><span class="line">        int result = nums[0];</span><br><span class="line">        for (int i = 0; i &lt; nums.length; i++) &#123;</span><br><span class="line">            int temp = 0;</span><br><span class="line">            for (int j = i; j &lt; nums.length; j++) &#123;</span><br><span class="line">                temp += nums[j];</span><br><span class="line">                if (temp &gt; result) result = temp;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="解法2"><a href="#解法2" class="headerlink" title="解法2"></a>解法2</h1><p>这是一个时间复杂度为O(n)解法。</p><p>定义3个变量：</p><ul><li>max:当前已找到的最大和。遍历结束后返回的即是该值。</li><li>now:当前求和的起始元素。这个值并未在代码中显式定义，而是隐含在sum中。</li><li>sum:当前求得的和。</li></ul><p>我们不妨先将问题分为两类：全为负数的情况及并非全为负数的情况。</p><p>当数组中的元素全部为负数时，此时将元素相加毫无意义(因为只会越加越小)，此时问题将退化为筛选出数组中最大的元素。即每次循环均有：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sum=nums[i]</span><br></pre></td></tr></table></figure><p>然后和max比较以筛选出最大值。</p><p>当数组中的元素并非全为负数时，一旦某次加法进行后导致和变为了负数，说明此次加法操作肯定是不应该的：毕竟本情况下数组中是有非负数的，单拎出来最大值也不会是负数。此时就应更换起点，然后和历史上得到的最大值做比较。依次类推，最终返回最大值。</p><p><strong>代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Solution &#123;</span><br><span class="line"></span><br><span class="line">    public int maxSubArray(int[] nums) &#123;</span><br><span class="line">        if (null == nums || nums.length == 0) return 0;</span><br><span class="line">        int max = Integer.MIN_VALUE, sum = 0;</span><br><span class="line">        for (int i = 0; i &lt; nums.length; i++) &#123;</span><br><span class="line">            sum = sum &lt; 0 ? nums[i] : sum + nums[i];</span><br><span class="line">            if (sum &gt; max) max = sum;</span><br><span class="line">        &#125;</span><br><span class="line">        return max;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题地址&quot;&gt;&lt;a href=&quot;#问题地址&quot; class=&quot;headerlink&quot; title=&quot;问题地址&quot;&gt;&lt;/a&gt;问题地址&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/maximum-subarray/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Maximum Subarray - LeetCode&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/blog_pic/Leetcode Algorithms/53Maximum Subarray/0.jpg&quot; alt=&quot;0.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode Algorithms" scheme="http://yoursite.com/categories/Leetcode-Algorithms/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Algorithms" scheme="http://yoursite.com/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode Algorithms-38.Count and Say</title>
    <link href="http://yoursite.com/2018/09/14/Leetcode%20Algorithms-38Count%20and%20Say/"/>
    <id>http://yoursite.com/2018/09/14/Leetcode Algorithms-38Count and Say/</id>
    <published>2018-09-14T10:52:43.000Z</published>
    <updated>2018-09-14T10:54:31.609Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题地址"><a href="#问题地址" class="headerlink" title="问题地址"></a>问题地址</h1><p><a href="https://leetcode.com/problems/count-and-say/description/" target="_blank" rel="noopener">Count and Say - LeetCode</a></p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><img src="/images/blog_pic/Leetcode Algorithms/38Count and Say/0.jpg" alt="0.jpg"></p><a id="more"></a><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><p><strong>代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class Solution &#123;</span><br><span class="line"></span><br><span class="line">    public String countAndSay(int n) &#123;</span><br><span class="line">        if (n &lt; 1 || n &gt; 30) return null;</span><br><span class="line">        String str = &quot;1&quot;;</span><br><span class="line">        for (int i = 1; i &lt; n; i++) &#123;</span><br><span class="line">            StringBuilder sb = new StringBuilder();</span><br><span class="line">            int mark = 0;</span><br><span class="line">            while (mark &lt; str.length()) &#123;</span><br><span class="line">                int count = numberCount(str, mark);</span><br><span class="line">                sb.append(count).append(str.charAt(mark));</span><br><span class="line">                mark += count;</span><br><span class="line">            &#125;</span><br><span class="line">            str = sb.toString();</span><br><span class="line">        &#125;</span><br><span class="line">        return str;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private int numberCount(String str, int mark) &#123;</span><br><span class="line">        int count = 1;</span><br><span class="line">        while (mark &lt; str.length() - 1) &#123;</span><br><span class="line">            if (str.charAt(mark + 1) != str.charAt(mark)) break;</span><br><span class="line">            count++;</span><br><span class="line">            mark++;</span><br><span class="line">        &#125;</span><br><span class="line">        return count;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题地址&quot;&gt;&lt;a href=&quot;#问题地址&quot; class=&quot;headerlink&quot; title=&quot;问题地址&quot;&gt;&lt;/a&gt;问题地址&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/count-and-say/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Count and Say - LeetCode&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/blog_pic/Leetcode Algorithms/38Count and Say/0.jpg&quot; alt=&quot;0.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode Algorithms" scheme="http://yoursite.com/categories/Leetcode-Algorithms/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Algorithms" scheme="http://yoursite.com/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode Algorithms-35.Search Insert Position</title>
    <link href="http://yoursite.com/2018/09/14/Leetcode%20Algorithms-35Search%20Insert%20Position/"/>
    <id>http://yoursite.com/2018/09/14/Leetcode Algorithms-35Search Insert Position/</id>
    <published>2018-09-14T09:52:43.000Z</published>
    <updated>2018-09-14T10:02:08.961Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题地址"><a href="#问题地址" class="headerlink" title="问题地址"></a>问题地址</h1><p><a href="https://leetcode.com/problems/search-insert-position/description/" target="_blank" rel="noopener">Search Insert Position - LeetCode</a></p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><img src="/images/blog_pic/Leetcode Algorithms/35Search Insert Position/0.jpg" alt="0.jpg"></p><a id="more"></a><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class Solution &#123;</span><br><span class="line"></span><br><span class="line">    public int searchInsert(int[] nums, int target) &#123;</span><br><span class="line">        if (null == nums) return -1;</span><br><span class="line">        int low = 0;</span><br><span class="line">        int high = nums.length - 1;</span><br><span class="line">        while (low &lt;= high) &#123;</span><br><span class="line">            int mid = low + (high - low) / 2;</span><br><span class="line">            if (target == nums[mid]) return mid;</span><br><span class="line">            if (target &lt; nums[mid]) high = mid - 1;</span><br><span class="line">            else low = mid + 1;</span><br><span class="line">        &#125;</span><br><span class="line">        return low;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本问题是二分查找的变种。当target在nums中时，和普通的二分查找一样返回mid即可。需要说明的是，当没有找到时，为何返回了low。</p><p>当无法找到时，最后一次查找必在相邻两个元素之间进行，即必有</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">high=low+1</span><br><span class="line">mid=low+(high-low)/2=low</span><br></pre></td></tr></table></figure><p>本次若是找到，即得出mid=target，那是最好。此时直接返回mid即可。若是找不到，在target&lt;mid时应返回low，而target&gt;mid时应返回high。我们可以回看代码，第一种情况下比较后low没有改变；而第二种情况下比较后low=mid+1，即low=low+1，恰好等于需要的high了。因此在最后一次比较结束后，直接返回low即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题地址&quot;&gt;&lt;a href=&quot;#问题地址&quot; class=&quot;headerlink&quot; title=&quot;问题地址&quot;&gt;&lt;/a&gt;问题地址&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/search-insert-position/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Search Insert Position - LeetCode&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/blog_pic/Leetcode Algorithms/35Search Insert Position/0.jpg&quot; alt=&quot;0.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode Algorithms" scheme="http://yoursite.com/categories/Leetcode-Algorithms/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Algorithms" scheme="http://yoursite.com/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Leetcode Algorithms-28.Implement strStr()</title>
    <link href="http://yoursite.com/2018/09/14/Leetcode%20Algorithms-28Implement%20strStr/"/>
    <id>http://yoursite.com/2018/09/14/Leetcode Algorithms-28Implement strStr/</id>
    <published>2018-09-14T08:53:43.000Z</published>
    <updated>2018-09-14T09:00:29.693Z</updated>
    
    <content type="html"><![CDATA[<h1 id="问题地址"><a href="#问题地址" class="headerlink" title="问题地址"></a>问题地址</h1><p><a href="https://leetcode.com/problems/implement-strstr/description/" target="_blank" rel="noopener">Implement strStr() - LeetCode</a></p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p><img src="/images/blog_pic/Leetcode Algorithms/28Implement strStr/0.jpg" alt="0.jpg"></p><a id="more"></a><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><p>显然，出题人希望我们能自行实现这个功能，而不是直接调用indexOf()或startsWith()。</p><p><strong>代码</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class Solution &#123;</span><br><span class="line"></span><br><span class="line">    public int strStr(String haystack, String needle) &#123;</span><br><span class="line">        if (null == haystack) throw new NullPointerException(&quot;haystack is null&quot;);</span><br><span class="line">        if (null == needle) return -1;</span><br><span class="line">        int hl = haystack.length();</span><br><span class="line">        int nl = needle.length();</span><br><span class="line">        if (nl == 0) return 0;</span><br><span class="line">        if (nl &gt; hl) return -1;</span><br><span class="line">        for (int hStart = 0; hStart &lt;= hl - nl; hStart++) &#123;</span><br><span class="line">            String temp = haystack.substring(hStart, hStart + nl);</span><br><span class="line">            if (needle.equals(temp)) return hStart;</span><br><span class="line">        &#125;</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;问题地址&quot;&gt;&lt;a href=&quot;#问题地址&quot; class=&quot;headerlink&quot; title=&quot;问题地址&quot;&gt;&lt;/a&gt;问题地址&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;https://leetcode.com/problems/implement-strstr/description/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Implement strStr() - LeetCode&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问题描述&quot;&gt;&lt;/a&gt;问题描述&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/blog_pic/Leetcode Algorithms/28Implement strStr/0.jpg&quot; alt=&quot;0.jpg&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Leetcode Algorithms" scheme="http://yoursite.com/categories/Leetcode-Algorithms/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="Leetcode" scheme="http://yoursite.com/tags/Leetcode/"/>
    
      <category term="Algorithms" scheme="http://yoursite.com/tags/Algorithms/"/>
    
  </entry>
  
  <entry>
    <title>Java 设计模式-23.Interpreter模式</title>
    <link href="http://yoursite.com/2018/09/10/Java%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-23Interpreter%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/09/10/Java 设计模式-23Interpreter模式/</id>
    <published>2018-09-10T06:45:49.000Z</published>
    <updated>2018-09-18T09:37:24.076Z</updated>
    
    <content type="html"><![CDATA[<p>在《图解设计模式》一书中，Interpreter模式被归入了第10部分<a href="">用类来表现</a>。在GoF原书中，Interpreter模式则被归入了<a href="">行为型设计模式</a>。</p><a id="more"></a><h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>现今主流的编程语言依然都属于第三代编程语言，这些语言的文法接近人类的自然语言，对程序员极其友好。然而实际执行程序的机器依然只能识别第一代编程语言(也就是一串1和0组成的流啦)，这就导致了，无论使用何种第三代编程语言，是Java也好，还是C++也罢，虽然具体的实现细节依语言不同而千差万别，但终归都需要进行一种操作：将程序员编写的高级语言代码翻译为机器能够识别的01码。</p><p>下面我们就以Java为例，来相对详细的说说这个过程。</p><p>和大多直接由高级语言翻译(编译执行与解释执行只是手段，其本质目的都还是翻译)为机器语言不同的是，Java将它内部的翻译过程又分为了两个阶段(当然，对外部使用者，也就是实际执行机器码的机器而言，这个过程是黑盒的)：首先会从程序员编写的，人类能够识别的Java语言翻译为.class文件(编译期)。而后再将.class文件翻译为机器能识别的机器码。</p><p>简单来说，程序员编写的Java语言遵循着一套语法(不妨标记为语法1)，机器识别机器码时遵循着另一套语法(语法3)。在此之外，Java又在其内部搞出了一个.class文件(语法2)。这样翻译链的顺序就变为了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法1 --&gt; 语法2 --&gt; 语法3</span><br></pre></td></tr></table></figure><p>之所以要这么搞，是为了实现Java语言的语言无关性。详见<a href="/2017/10/16/Java 基础-技术体系/">Java 基础-技术体系</a>。</p><p>且不说翻译了几次，单说翻译行为本身，它的作用大致可归为以下两点：</p><ol><li>虽然翻译本身增加了额外的开销，却使得程序员得以用更加类似自然语言的语法编写程序，极大的降低了学习成本，同时提高了代码编写的便利性与可维护性。</li><li>完成了各级语言间的解耦。以语法1 –&gt; 语法2的过程为例。Java程序员只需要知道Java语言的语法，而它的翻译者(我们称其为编译器)在此基础上还需要知道.class文件的语法。这意味着，无论是语法1亦或是语法2发生了何种变化，只要另一种语法尚能实现相同的功能，那么对彼此而言，这种变化就是透明的：它会被翻译者消化掉。从这种意义上来讲，翻译者颇有些<a href="">2.Adapter模式</a>中的适配器的意思。</li></ol><p>将这种思想进一步扩展，得到的就是Interpreter模式。</p><p>主流的高级编程语言都是通用的，虽然各有擅长的点，但基本都能胜任绝大多数场景。而这种通用的另一面就是不够特化：高级语言语法的设计者当然不可能因为某个需求就修改语法。不过，高级语言的设计者虽然不能这么做，但需求的设计者却可以这样做：也就是说，我们为某个需求，或是某一类需求，定制一种”迷你语言”。如果我们将其称之为”语法0”的话，那么上文的翻译链就变为了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">语法0 --&gt; 语法1 --&gt; 语法2 --&gt; 语法3</span><br></pre></td></tr></table></figure><p>如果想要这么做的话，我们当然也可以在语法0前面加上个”语法-1”，使得翻译链无限的向上堆叠上去，只不过这会让程序变得复杂，而这种复杂通常是没什么意义的，所以通常都不会这么做。</p><p>具体到这个应用场景，我们再来说下引入”语法0”的好处：</p><ol><li>较之高级语言，迷你语言的语法简单，且为需求高度定制。使得代码(此时程序员写的当然就是迷你语言的代码啦)的书写更为容易，目的性也更强。</li><li>在这个场景下，高级语言的语法一般不会发生变化，迷你语言的语法通常也不会发生变化。发生变化的基本只会是使用迷你语言编写的代码。</li></ol><p>如果要使用Interpreter模式编写程序的话，难点通常并不是在于编写迷你语言本身，而是在于编写”语法0 –&gt; 语法1”的翻译器。因为迷你语言完全是程序员根据需求生造出来的，只有他自己才知道语法，因此也只有他本身才能编写翻译器。这也是Interpreter模式被称为”解释器模式”的原因所在。通常翻译器我们都会用”语法1”，也就是作为基底的高级语言来开发。</p><h1 id="控制人物移动的迷你语言"><a href="#控制人物移动的迷你语言" class="headerlink" title="控制人物移动的迷你语言"></a>控制人物移动的迷你语言</h1><p>下面我们就针对”控制人物移动”这个需求来创建一门全新的迷你语言吧！</p><p>首先介绍下本文用于作为行走角色的妹子，来自东方Project的<a href="https://baike.baidu.com/item/%E4%BC%8A%E5%90%B9%E8%90%83%E9%A6%99/8771754?fr=aladdin" target="_blank" rel="noopener">伊吹萃香</a>：</p><p><img src="/images/blog_pic/Java 设计模式/23Interpreter模式/0.jpg" alt="0.jpg"></p><p>萃香好可爱啊~融化了。</p><p>这是用到的行走图素材，也是萌萌哒：</p><p><img src="/images/blog_pic/Java 设计模式/23Interpreter模式/1.png" alt="1.png"></p><p>按需求，我们可以向人物下达如下3种指令：</p><ul><li>前进1个长度单位(go)</li><li>右转(right)</li><li>左转(left)</li></ul><p>其中左转与右转是严格意义上的原地转向。在此之上，为了构成一个相对复杂的语言，我们引入了新的指令：</p><ul><li>重复(repeat)</li></ul><p>这可以让人物重复一定次数的指令集合。至此，我们已得到构成本文迷你语言的全部指令。</p><p>要想被称之为一门语言，光有指令(相当于自然语言中的单词)是不够的，我们还需要规定一个语法将它们组合起来。对于本文的迷你语言，我们先来看一段最简单的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">program</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>我们规定，这门迷你语言必须以program开头，后面跟随着指令集合(command list)。command list必须以end结尾。如果command list为空，那么就会出现上文中program后面直接跟着一个end的情况啦。显然，上述代码不会产生任何实际的效果。</p><p>程序可以采用换行，空格，tab等任何主流的分隔符，这意味上述代码我们也可以写成这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">program end</span><br></pre></td></tr></table></figure><p>不过为了便于阅读，对于书写任意语言而言，适当的缩进都是很必要的。</p><p>然后我们再来看一段稍微复杂点的代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">program</span><br><span class="line">  go go right</span><br><span class="line">  go go right</span><br><span class="line">  go go right</span><br><span class="line">  go go right</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>程序会按指令的书写顺序执行它们。执行这段指令，可以输出：</p><p><img src="/images/blog_pic/Java 设计模式/23Interpreter模式/2.jpg" alt="2.jpg"></p><p>该代码会让人物走一个正方形，而后回到初始的位置和朝向。为了在静态的图片中表现出代码的执行过程，我们绘制了人物移动的轨迹。</p><p>如果仔细看一下上述代码的话，会发现我们将：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">go go right</span><br></pre></td></tr></table></figure><p>这个代码片段重复写了4遍。显然这是很low的行为。因此就需要repeat指令登场啦：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">program</span><br><span class="line">  repeat 4 go go right end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>repeat指令的语法规则为：首先是作为关键字的repeat，然后是表示循环次数的数字。最后是实际被循环的command list。执行该代码后输出与前图相同。</p><p>我们可以再来走一个更复杂的轨迹：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">program</span><br><span class="line">  repeat 1000</span><br><span class="line">    repeat 4</span><br><span class="line">      repeat 3 go right go left end</span><br><span class="line">      right</span><br><span class="line">    end</span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>这段代码会重复一个相对复杂的轨迹1000次，贴几张移动过程中的截图吧：</p><p><img src="/images/blog_pic/Java 设计模式/23Interpreter模式/3.jpg" alt="3.jpg"></p><p><img src="/images/blog_pic/Java 设计模式/23Interpreter模式/4.jpg" alt="4.jpg"></p><p><img src="/images/blog_pic/Java 设计模式/23Interpreter模式/5.jpg" alt="5.jpg"></p><p><img src="/images/blog_pic/Java 设计模式/23Interpreter模式/6.jpg" alt="6.jpg"></p><p><img src="/images/blog_pic/Java 设计模式/23Interpreter模式/7.jpg" alt="7.jpg"></p><h1 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h1><p>迷你语言的语法结构至此就算是结束了，该语言非常简单，简单到只有顺序和循环结构，连分支结构都没有。不过用来作说明已经是足够了。此外，上文我们是以自然语言在进行描述，也就是说给产品经理听的。而技术人员如果要将该语法落实到代码中，还需要用更为准确的数学语言来描述才可以。</p><p>本文采取的描述方法为EBNF(Extended Backus–Naur Form，即扩展的巴科斯-瑙尔范式)。顾名思义，它是对BNF(Backus-Naur Form，巴科斯范式)的扩展。我们先给出全部的语法描述：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;program&gt; ::= program &lt;command list&gt;</span><br><span class="line">&lt;command list&gt; ::= &lt;command&gt;* end</span><br><span class="line">&lt;command&gt; ::= &lt;repeat command&gt; | &lt;primitive command&gt;</span><br><span class="line">&lt;repeat command&gt; ::= repeat &lt;number&gt; &lt;command list&gt;</span><br><span class="line">&lt;primitive command&gt; ::= go | left | right</span><br></pre></td></tr></table></figure><p>较之自然语言，是不是简洁了许多呢(事实上，不仅仅是看起来简洁了，也更为精确了)？下面就来逐句分析一下吧！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;program&gt; ::= program &lt;command list&gt;</span><br></pre></td></tr></table></figure><p>首先是第一句，这个::=我们简单的理解为赋值就可以啦！该句用于描述&lt;program&gt;这个标签，或者更确切的说，是构成语法树的&lt;program&gt;结点。按照描述，&lt;program&gt;节点就是program关键字后跟上一个&lt;command list&gt;。</p><p>至此&lt;program&gt;算是描述完了，但是我们却无法真正能说完全了解它，program作为一个普通的字符串没什么可说的，不过这个&lt;command list&gt;是什么呢？这就好比表达式y=x+3，如果我们不知道x是什么，自然也不能知道y是什么。</p><p>不过不要急，第二句就是在描述&lt;command list&gt;啦：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;command list&gt; ::= &lt;command&gt;* end</span><br></pre></td></tr></table></figure><p>哦，原来&lt;command list&gt;是0到多个(描述范式中*所代表的含义，熟悉正则的朋友们应该会感到很亲切吧)&lt;command&gt;节点后再加上end关键字。那么这个&lt;command&gt;是什么呢：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;command&gt; ::= &lt;repeat command&gt; | &lt;primitive command&gt;</span><br></pre></td></tr></table></figure><p>范式告诉我们，&lt;command&gt;是一个&lt;repeat command&gt;结点或是一个&lt;primitive command&gt;结点。</p><p>而&lt;repeat command&gt;：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;repeat command&gt; ::= repeat &lt;number&gt; &lt;command list&gt;</span><br></pre></td></tr></table></figure><p>它是repeat关键字后跟随一个&lt;number&gt;结点，再跟随一个前文介绍过的&lt;command list&gt;结点。从而形成了递归结构。</p><p>最后是&lt;primitive command&gt;：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;primitive command&gt; ::= go | left | right</span><br></pre></td></tr></table></figure><p>它是go,left,right这3个关键字中的某一个。在编程领域，像&lt;primitive command&gt;这样描述它的信息中不包含其他结点的，或者更直观的说，我们可以仅仅通过描述语句本身就完全弄明白含义的结点，被称为终结符表达式(Terminal Expression)。与之相对的，像&lt;command list&gt;，&lt;command&gt;等需要进一步展开的结点则被称为非终结符表达式(Nonterminal Expression)。所谓递归，其实就是因非终结符表达式而起，最后收束于终结符表达式。</p><p>细心的朋友想必可以发现，我们还剩一个&lt;number&gt;结点没有描述。其实是应该写的，它应该是一个大于等于0的整数，是一个终结符表达式。只不过它的描述较为复杂，这里便省略了。</p><p>完成了语法的数学化描述后，下一步就是根据该描述将迷你语言的代码依据语法规则翻译为语法树，并存入宿主语言(本文使用Java)中，这一步被称为解析。而后再执行语法树中存储的语义，得到输出。这么说还是会有一些抽象，还是让我们赶紧来看具体的代码吧。</p><p>本程序中的所有代码将被统一置于design23包下，结构如下：</p><p><img src="/images/blog_pic/Java 设计模式/23Interpreter模式/8.jpg" alt="8.jpg"></p><p>迷你语言的示例程序使用前文介绍过的那个重复绘制1000次的复制图形。它被存储在名为code.txt的文件中。</p><p><strong>code.txt</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">program</span><br><span class="line">  repeat 1000</span><br><span class="line">    repeat 4</span><br><span class="line">      repeat 3 go right go left end</span><br><span class="line">      right</span><br><span class="line">    end</span><br><span class="line">  end</span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>然后我们介绍本文的重点，也就是model.parse包下的内容。这个包下的代码完成了前文说到的迷你语言的语法树的构建(即解析)以及执行。秉承Java语言”一切都是对象，对象就是一切”的思想，上文介绍的EBNF中的结点最终都被翻译为了类，这在后文的代码中将会有很明显的体现。</p><p><strong>Node类</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package design23.model.parse;</span><br><span class="line"></span><br><span class="line">import design23.model.entity.GameMap;</span><br><span class="line"></span><br><span class="line">public abstract class Node &#123;</span><br><span class="line"></span><br><span class="line">    public abstract void parse(Context context) throws ParseException;</span><br><span class="line"></span><br><span class="line">    public abstract void exe(GameMap map);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Node类是所有结点的抽象父类。按照需求，它约束自身的子类必须实现两个基本的功能：parse() –&gt; 解析 及 exe() –&gt; 执行。很显然，这两个方法的调用是有先后顺序的，即我们必须先完成解析，形成语法树，才能执行。</p><p>在解析方法parse()的方法定义中，我们抛出了自定义异常ParseException：</p><p><strong>ParseException类</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package design23.model.parse;</span><br><span class="line"></span><br><span class="line">public class ParseException extends Exception &#123;</span><br><span class="line"></span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line"></span><br><span class="line">    ParseException(String msg) &#123;</span><br><span class="line">        super(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这只是一个很简单的异常类，就不多做赘述了。</p><p><strong>ProgramNode类</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">package design23.model.parse;</span><br><span class="line"></span><br><span class="line">import design23.model.entity.GameMap;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * &lt;program&gt; ::= program &lt;command list&gt;</span><br><span class="line"> */</span><br><span class="line">public class ProgramNode extends Node &#123;</span><br><span class="line"></span><br><span class="line">    private CommandListNode commandListNode;</span><br><span class="line"></span><br><span class="line">    private static final String PROGRAM_STR = &quot;program&quot;;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void parse(Context context) throws ParseException &#123;</span><br><span class="line">        context.skip(ProgramNode.PROGRAM_STR);</span><br><span class="line">        this.commandListNode = new CommandListNode();</span><br><span class="line">        this.commandListNode.parse(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;[&quot; + ProgramNode.PROGRAM_STR + &quot; &quot; + this.commandListNode + &quot;]&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void exe(GameMap map) &#123;</span><br><span class="line">        this.commandListNode.exe(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>终于到EBNF中介绍的真正的结点了。很显然，ProgramNode对应&lt;program&gt;，这在类首的注释中也有所体现。我们会为每一个结点都加上类似的类首注释，以表明它代表的是EBNF中的哪个结点，因此后文在介绍其他结点时就不会再显式的点出这种对应关系了。</p><p>关于将EBNF翻译为实际的类，有一个很重要的点就是”不要做多余的事”。简单来说，在我们编写ProgramNode时，能参照的就仅仅只是:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;program&gt; ::= program &lt;command list&gt;</span><br></pre></td></tr></table></figure><p>其他的一切都不需要知道。也不要耍小聪明做一些EBNF中没有的事，如果实在是想加新功能，也需要修改EBNF，而不是在翻译出的代码中自作主张。语法的设计在EBNF中已全部完成了，从EBNF到具体的代码仅仅只需要机械的翻译。</p><p>因此，这些结点的代码本身其实没什么好说的，后续结点的代码我们将快速的贴出。</p><p><strong>CommandListNode类</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">package design23.model.parse;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import design23.model.entity.GameMap;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * &lt;command list&gt; ::= &lt;command&gt;* end</span><br><span class="line"> */</span><br><span class="line">public class CommandListNode extends Node &#123;</span><br><span class="line"></span><br><span class="line">    private List&lt;CommandNode&gt; commandList = new ArrayList&lt;CommandNode&gt;();</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void parse(Context context) throws ParseException &#123;</span><br><span class="line">        while (true) &#123;</span><br><span class="line">            String current = context.peek();</span><br><span class="line">            String endstr = &quot;end&quot;;</span><br><span class="line">            if (null == current) throw new ParseException(&quot;Missing &apos;&quot; + endstr + &quot;&apos;&quot;);</span><br><span class="line">            if (endstr.equals(current)) &#123;</span><br><span class="line">                context.skip(endstr);</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            CommandNode commandNode = new CommandNode();</span><br><span class="line">            this.commandList.add(commandNode);</span><br><span class="line">            commandNode.parse(context);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return this.commandList.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void exe(GameMap map) &#123;</span><br><span class="line">        for (CommandNode commandNode : this.commandList)</span><br><span class="line">            commandNode.exe(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>CommandNode类</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package design23.model.parse;</span><br><span class="line"></span><br><span class="line">import design23.model.entity.GameMap;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * &lt;command&gt; ::= &lt;repeat command&gt; | &lt;primitive command&gt;</span><br><span class="line"> */</span><br><span class="line">public class CommandNode extends Node &#123;</span><br><span class="line"></span><br><span class="line">    private CommandNode commandNode;</span><br><span class="line"></span><br><span class="line">    protected static final String REPEAT_STR = &quot;repeat&quot;;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void parse(Context context) throws ParseException &#123;</span><br><span class="line">        this.commandNode = CommandNode.REPEAT_STR.equals(context.peek()) ?</span><br><span class="line">                           new RepeatCommandNode() :</span><br><span class="line">                           new PrimitiveCommandNode();</span><br><span class="line">        this.commandNode.parse(context);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return this.commandNode.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void exe(GameMap map) &#123;</span><br><span class="line">        this.commandNode.exe(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>RepeatCommandNode类</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">package design23.model.parse;</span><br><span class="line"></span><br><span class="line">import design23.model.entity.GameMap;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * &lt;repeat command&gt; ::= repeat &lt;number&gt; &lt;command list&gt;</span><br><span class="line"> */</span><br><span class="line">public class RepeatCommandNode extends CommandNode &#123;</span><br><span class="line"></span><br><span class="line">    private int number;</span><br><span class="line"></span><br><span class="line">    private CommandListNode commandListNode;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void parse(Context context) throws ParseException &#123;</span><br><span class="line">        context.skip(CommandNode.REPEAT_STR);</span><br><span class="line">        try &#123;</span><br><span class="line">            this.number = Integer.parseInt(context.peek());</span><br><span class="line">        &#125; catch (NumberFormatException e) &#123;</span><br><span class="line">            throw new ParseException(&quot;fail to parse &quot; + CommandNode.REPEAT_STR + &quot; times.&quot; + e);</span><br><span class="line">        &#125;</span><br><span class="line">        context.next();</span><br><span class="line">        this.commandListNode = new CommandListNode();</span><br><span class="line">        this.commandListNode.parse(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;[&quot; + CommandNode.REPEAT_STR + &quot; &quot; + this.number + &quot; &quot; + this.commandListNode + &quot;]&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void exe(GameMap map) &#123;</span><br><span class="line">        for (int i = 0; i &lt; this.number; i++)</span><br><span class="line">            this.commandListNode.exe(map);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>PrimitiveCommandNode类</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line">package design23.model.parse;</span><br><span class="line"></span><br><span class="line">import design23.model.entity.GameMap;</span><br><span class="line">import design23.model.entity.Grid;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * &lt;primitive command&gt; ::= go | left | right</span><br><span class="line"> */</span><br><span class="line">public class PrimitiveCommandNode extends CommandNode &#123;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line"></span><br><span class="line">    public static final String GO = &quot;go&quot;;</span><br><span class="line"></span><br><span class="line">    public static final String LEFT = &quot;left&quot;;</span><br><span class="line"></span><br><span class="line">    public static final String RIGHT = &quot;right&quot;;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void parse(Context context) throws ParseException &#123;</span><br><span class="line">        this.name = context.peek();</span><br><span class="line">        context.skip(this.name);</span><br><span class="line">        if (!PrimitiveCommandNode.GO.equals(this.name) &amp;&amp;</span><br><span class="line">            !PrimitiveCommandNode.LEFT.equals(this.name) &amp;&amp;</span><br><span class="line">            !PrimitiveCommandNode.RIGHT.equals(this.name))</span><br><span class="line">            throw new ParseException(&quot;command &quot; + this.name + &quot; is undefined&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return this.name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void exe(GameMap map) &#123;</span><br><span class="line">        int maxR = map.getGrids().length;</span><br><span class="line">        int maxC = map.getGrids()[0].length;</span><br><span class="line">        int focusR = map.getFocusR();</span><br><span class="line">        int focusC = map.getFocusC();</span><br><span class="line">        Grid focusGrid = map.getGrids()[focusR][focusC];</span><br><span class="line">        int direction = focusGrid.getDirection();</span><br><span class="line">        if (PrimitiveCommandNode.GO.equals(this.name)) &#123;</span><br><span class="line">            int newFocusR = focusR;</span><br><span class="line">            int newFocusC = focusC;</span><br><span class="line">            switch (direction) &#123;</span><br><span class="line">            case 0:</span><br><span class="line">                if (focusR + 1 == maxR) break;</span><br><span class="line">                newFocusR = focusR + 1;</span><br><span class="line">                break;</span><br><span class="line">            case 1:</span><br><span class="line">                if (focusC == 0) break;</span><br><span class="line">                newFocusC = focusC - 1;</span><br><span class="line">                break;</span><br><span class="line">            case 2:</span><br><span class="line">                if (focusC + 1 == maxC) break;</span><br><span class="line">                newFocusC = focusC + 1;</span><br><span class="line">                break;</span><br><span class="line">            case 3:</span><br><span class="line">                if (focusR == 0) break;</span><br><span class="line">                newFocusR = focusR - 1;</span><br><span class="line">            &#125;</span><br><span class="line">            // 模拟走路动作</span><br><span class="line">            for (int i = 0; i &lt; map.getStageCount(); i++) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    Thread.sleep(300);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">                focusGrid.setStage((focusGrid.getStage() + 1) % map.getStageCount());</span><br><span class="line">                if (i == map.getStageCount() / 2) &#123;</span><br><span class="line">                    // 设置新的焦点格</span><br><span class="line">                    map.getGrids()[newFocusR][newFocusC].setDirection(direction);</span><br><span class="line">                    map.getGrids()[newFocusR][newFocusC].setStage(focusGrid.getStage());</span><br><span class="line">                    map.getGrids()[newFocusR][newFocusC].setTimes(map.getGrids()[newFocusR][newFocusC].getTimes() + 1);</span><br><span class="line">                    map.setFocusR(newFocusR);</span><br><span class="line">                    map.setFocusC(newFocusC);</span><br><span class="line">                    // 设置原来的焦点格</span><br><span class="line">                    focusGrid.setDirection(-1);</span><br><span class="line">                    focusGrid.setStage(-1);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else if (PrimitiveCommandNode.LEFT.equals(this.name)) &#123;</span><br><span class="line">            switch (direction) &#123;</span><br><span class="line">            case 0:</span><br><span class="line">                focusGrid.setDirection(2);</span><br><span class="line">                break;</span><br><span class="line">            case 1:</span><br><span class="line">                focusGrid.setDirection(0);</span><br><span class="line">                break;</span><br><span class="line">            case 2:</span><br><span class="line">                focusGrid.setDirection(3);</span><br><span class="line">                break;</span><br><span class="line">            case 3:</span><br><span class="line">                focusGrid.setDirection(1);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            switch (direction) &#123;</span><br><span class="line">            case 0:</span><br><span class="line">                focusGrid.setDirection(1);</span><br><span class="line">                break;</span><br><span class="line">            case 1:</span><br><span class="line">                focusGrid.setDirection(3);</span><br><span class="line">                break;</span><br><span class="line">            case 2:</span><br><span class="line">                focusGrid.setDirection(0);</span><br><span class="line">                break;</span><br><span class="line">            case 3:</span><br><span class="line">                focusGrid.setDirection(2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，所有的结点我们都介绍完了。不过，为了能让翻译器接收到源码，我们还写了Context类：</p><p><strong>Context类</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">package design23.model.parse;</span><br><span class="line"></span><br><span class="line">import java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line">public class Context &#123;</span><br><span class="line"></span><br><span class="line">    private StringTokenizer st;</span><br><span class="line"></span><br><span class="line">    private String current;</span><br><span class="line"></span><br><span class="line">    public Context(String text) &#123;</span><br><span class="line">        this.st = new StringTokenizer(text);</span><br><span class="line">        this.next();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String peek() &#123;</span><br><span class="line">        return this.current;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    String next() &#123;</span><br><span class="line">        this.current = this.st.hasMoreTokens() ?</span><br><span class="line">                       this.st.nextToken() :</span><br><span class="line">                       null;</span><br><span class="line">        return this.current;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    void skip(String token) throws ParseException &#123;</span><br><span class="line">        if (!token.equals(this.current))</span><br><span class="line">            throw new ParseException(&quot;need &quot; + token + &quot;, but &quot; + this.current + &quot; is found&quot;);</span><br><span class="line">        this.next();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Context类的功能很简单，它将源码按分割符分割为一个个单词，然后作为解析器会逐个读取单词，而后根据单词生成新的结点，并将结点挂载到语法树合适的位置上。随着语法树的构建，Context中的文本信息会越来越少，直至读完。</p><p>至此，本文要介绍的核心功能就已经描述完了。后文要介绍的代码都只是为了得到一个可视化的结果。</p><p>首先来看model.entity包，这个包下存储了程序要展示的一些实体。一如前文中的截图看到的，我们希望游戏最终能实现RPG制作大师做出的游戏的效果。因此我们需要一张存储所有要素的游戏地图，该地图是由一个个”小格子”组成的。</p><p><strong>GameMap类</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">package design23.model.entity;</span><br><span class="line"></span><br><span class="line">public class GameMap &#123;</span><br><span class="line"></span><br><span class="line">    private Grid[][] grids;</span><br><span class="line"></span><br><span class="line">    private int focusR;</span><br><span class="line"></span><br><span class="line">    private int focusC;</span><br><span class="line"></span><br><span class="line">    private int stageCount;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * @param row 地图上小格子的行数</span><br><span class="line">     * @param column 地图上小格子的列数</span><br><span class="line">     * @param stageCount 人物的行走状态</span><br><span class="line">     * @param focusR 初始时人物所在的小格子的行号</span><br><span class="line">     * @param focusC 初始时人物所在的小格子的列号</span><br><span class="line">     * @param initDirection 初始时人物的朝向 </span><br><span class="line">     */</span><br><span class="line">    public GameMap(int row, int column, int stageCount, int focusR, int focusC, int direction) &#123;</span><br><span class="line">        this.stageCount = stageCount;</span><br><span class="line">        this.grids = new Grid[row][column];</span><br><span class="line">        for (int r = 0; r &lt; row; r++)</span><br><span class="line">            for (int c = 0; c &lt; column; c++)</span><br><span class="line">                this.grids[r][c] = new Grid();</span><br><span class="line">        this.focusR = focusR;</span><br><span class="line">        this.focusC = focusC;</span><br><span class="line">        this.grids[this.focusR][this.focusC].setDirection(direction);</span><br><span class="line">        this.grids[this.focusR][this.focusC].setStage(1);</span><br><span class="line">        this.grids[this.focusR][this.focusC].setTimes(1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public Grid[][] getGrids() &#123;</span><br><span class="line">        return grids;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getFocusR() &#123;</span><br><span class="line">        return focusR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setFocusR(int focusR) &#123;</span><br><span class="line">        this.focusR = focusR;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getFocusC() &#123;</span><br><span class="line">        return focusC;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setFocusC(int focusC) &#123;</span><br><span class="line">        this.focusC = focusC;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getStageCount() &#123;</span><br><span class="line">        return stageCount;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Grid类</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">package design23.model.entity;</span><br><span class="line"></span><br><span class="line">public class Grid &#123;</span><br><span class="line"></span><br><span class="line">    private int direction = -1;</span><br><span class="line"></span><br><span class="line">    private int stage = -1;</span><br><span class="line"></span><br><span class="line">    private int times;</span><br><span class="line"></span><br><span class="line">    public int getDirection() &#123;</span><br><span class="line">        return direction;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setDirection(int direction) &#123;</span><br><span class="line">        this.direction = direction;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getStage() &#123;</span><br><span class="line">        return stage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setStage(int stage) &#123;</span><br><span class="line">        this.stage = stage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getTimes() &#123;</span><br><span class="line">        return times;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setTimes(int times) &#123;</span><br><span class="line">        this.times = times;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用了GameMap的构造函数后，我们便构建了这样的一张地图：</p><ul><li>row行column列</li><li>初始时人物所在的格子位置：grids[this.focusR][this.focusC]</li><li>只会有一个格子处于焦点状态。未处于焦点状态的格子的direction和stage均默认为-1。</li><li>Grid的times属性是指人物来到该格子上的次数，绘制轨迹用。</li></ul><p>这里需要简单介绍下direction与stage的含义。其中direction表示人物当前的朝向。而stage则表示行走状态，在人物从1个格子移动到另一个格子的过程中，我们一共会变化出3张图片，从而模拟出”人物移动的动作”。</p><p>这两个字段实际都是服务于图character.png：</p><p><img src="/images/blog_pic/Java 设计模式/23Interpreter模式/9.png" alt="9.png"></p><p>纵向来看，0-3分别代表下左右上四个朝向。而横向的0-2则代表三个行走状态：站立不动是中间的那张状态1。当人物从一个格子移动到另一个格子上时，发生的变化为：状态1 –&gt; 状态2 –&gt; 状态0 –&gt; 状态1。</p><p>然后我们提供了将parse包及entity包整合起来并对外(指得就是View啦)提供功能接口的Model类：</p><p><strong>Model类</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">package design23.model;</span><br><span class="line"></span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.lang.StringUtils;</span><br><span class="line"></span><br><span class="line">import design23.model.entity.GameMap;</span><br><span class="line">import design23.model.parse.Context;</span><br><span class="line">import design23.model.parse.ParseException;</span><br><span class="line">import design23.model.parse.ProgramNode;</span><br><span class="line"></span><br><span class="line">public class Model &#123;</span><br><span class="line"></span><br><span class="line">    private GameMap map;</span><br><span class="line"></span><br><span class="line">    private ProgramNode root = new ProgramNode();</span><br><span class="line"></span><br><span class="line">    public void initMap(int row, int column, int stageCount, int focusR, int focusC, int direction) &#123;</span><br><span class="line">        this.map = new GameMap(row, column, stageCount, focusR, focusC, direction);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void initInterpreter(String path) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            this.root.parse(new Context(this.loadCode(path)));</span><br><span class="line">        &#125; catch (ParseException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(this.root);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void exe() &#123;</span><br><span class="line">        new Thread() &#123;</span><br><span class="line">            @Override</span><br><span class="line">            public void run() &#123;</span><br><span class="line">                Model.this.root.exe(Model.this.map);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public GameMap getMap() &#123;</span><br><span class="line">        return map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private String loadCode(String path) &#123;</span><br><span class="line">        StringBuilder sb = new StringBuilder();</span><br><span class="line">        FileInputStream fi = null;</span><br><span class="line">        InputStreamReader ir = null;</span><br><span class="line">        BufferedReader br = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            fi = new FileInputStream(new File(path));</span><br><span class="line">            ir = new InputStreamReader(fi, &quot;UTF-8&quot;);</span><br><span class="line">            br = new BufferedReader(ir);</span><br><span class="line">            String lineTxt = null;</span><br><span class="line">            while (!StringUtils.isBlank((lineTxt = br.readLine())))</span><br><span class="line">                sb.append(lineTxt).append(&quot; &quot;);</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                br.close();</span><br><span class="line">                ir.close();</span><br><span class="line">                fi.close();</span><br><span class="line">            &#125; catch (Exception ef) &#123;</span><br><span class="line">                ef.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后是作为GUI显示的View类，本文使用Java AWT：</p><p><strong>View类</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">package design23.view;</span><br><span class="line"></span><br><span class="line">import java.awt.Color;</span><br><span class="line">import java.awt.Frame;</span><br><span class="line">import java.awt.Graphics;</span><br><span class="line">import java.awt.Image;</span><br><span class="line">import java.awt.event.WindowAdapter;</span><br><span class="line">import java.awt.event.WindowEvent;</span><br><span class="line">import java.awt.image.BufferedImage;</span><br><span class="line">import java.io.IOException;</span><br><span class="line"></span><br><span class="line">import javax.imageio.ImageIO;</span><br><span class="line"></span><br><span class="line">import design23.model.Model;</span><br><span class="line">import design23.model.entity.Grid;</span><br><span class="line"></span><br><span class="line">public class View extends Frame &#123;</span><br><span class="line"></span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line"></span><br><span class="line">    private int gridSize = 32;</span><br><span class="line"></span><br><span class="line">    private int widebar = 31;</span><br><span class="line"></span><br><span class="line">    private int narrowbar = 6;</span><br><span class="line"></span><br><span class="line">    private Model model = new Model();</span><br><span class="line"></span><br><span class="line">    private BufferedImage img = this.loadImg(&quot;character.png&quot;);</span><br><span class="line"></span><br><span class="line">    public void launchFrame() &#123;</span><br><span class="line">        int gridRow = 7;</span><br><span class="line">        int gridColumn = 7;</span><br><span class="line">        this.model.initMap(gridRow, gridColumn, 3, 3, 0, 3);</span><br><span class="line">        this.model.initInterpreter(&quot;src/main/java/design23/code.txt&quot;);</span><br><span class="line">        super.setLocation(800, 300);</span><br><span class="line">        super.setSize(this.narrowbar + this.gridSize * gridColumn + this.narrowbar, this.widebar + this.gridSize * gridRow + this.narrowbar);</span><br><span class="line">        new Thread(this.new RepaintRunnable()).start();</span><br><span class="line">        super.addWindowListener(</span><br><span class="line">            new WindowAdapter() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void windowClosing(WindowEvent e) &#123;</span><br><span class="line">                    System.exit(0);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">        this.model.exe();</span><br><span class="line">        super.setVisible(true);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void paint(Graphics g) &#123;</span><br><span class="line">        Grid[][] grids = this.model.getMap().getGrids();</span><br><span class="line">        for (int r = 0; r &lt; grids.length; r++) &#123;</span><br><span class="line">            for (int c = 0; c &lt; grids[0].length; c++) &#123;</span><br><span class="line">                Grid grid = grids[r][c];</span><br><span class="line">                int dx1 = this.narrowbar + c * this.gridSize;</span><br><span class="line">                int dy1 = this.widebar + r * this.gridSize;</span><br><span class="line">                if (grid.getTimes() &gt; 0) &#123;</span><br><span class="line">                    Color tempColor = g.getColor();</span><br><span class="line">                    g.setColor(Color.GRAY);</span><br><span class="line">                    g.fillRect(dx1, dy1, this.gridSize, this.gridSize);</span><br><span class="line">                    g.setColor(tempColor);</span><br><span class="line">                &#125;</span><br><span class="line">                if (grid.getDirection() &gt;= 0) &#123;</span><br><span class="line">                    int direction = grid.getDirection();</span><br><span class="line">                    int stage = grid.getStage();</span><br><span class="line">                    g.drawImage(this.img,</span><br><span class="line">                                dx1,</span><br><span class="line">                                dy1,</span><br><span class="line">                                this.narrowbar + c * this.gridSize + this.gridSize,</span><br><span class="line">                                this.widebar + r * this.gridSize + this.gridSize,</span><br><span class="line">                                stage * this.gridSize,</span><br><span class="line">                                direction * this.gridSize,</span><br><span class="line">                                stage * this.gridSize + this.gridSize,</span><br><span class="line">                                direction * this.gridSize + this.gridSize,</span><br><span class="line">                                null);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private class RepaintRunnable implements Runnable &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void run() &#123;</span><br><span class="line">            while (true) &#123;</span><br><span class="line">                try &#123;</span><br><span class="line">                    View.this.repaint();</span><br><span class="line">                    Thread.sleep(10);</span><br><span class="line">                &#125; catch (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void update(Graphics g) &#123;</span><br><span class="line">        Image bImage = super.createImage(this.getWidth(), this.getHeight());</span><br><span class="line">        Graphics bg = bImage.getGraphics();</span><br><span class="line">        this.paint(bg);</span><br><span class="line">        bg.dispose();</span><br><span class="line">        g.drawImage(bImage, 0, 0, this);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    private BufferedImage loadImg(String name) &#123;</span><br><span class="line">        BufferedImage bImage = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            bImage = ImageIO.read(View.class.getClassLoader().getResource(&quot;design23/&quot; + name));</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return bImage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在View的launchFrame()中，我们先调用model的initMap()初始化了地图，而后又调用model的initInterpreter()初始化了语法树。而后在需要的时候，也就是launchFrame()的最后，我们调用model的exe()方法来执行语法树。该方法会启一个新的线程，按设定的代码移动人物(其实就是改变地图中属性的值)。而View剩余要做的，就是不断的刷新并显示地图，将翻译器更新后的数据显示出来。</p><p>最后给出Main.java。执行该类后，即可得到结果。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package design23;</span><br><span class="line"></span><br><span class="line">import design23.view.View;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        new View().launchFrame();        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，因为我们在Model初始化语法树时将语法树打印出来了。因此除了UI外，我们还会在控制台中得到这样的一句输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[program [[repeat 1000 [[repeat 4 [[repeat 3 [go, right, go, left]], right]]]]]]</span><br></pre></td></tr></table></figure><p>大家可以对照前文的EBNF加深理解。</p><h1 id="登场角色"><a href="#登场角色" class="headerlink" title="登场角色"></a>登场角色</h1><p>上面的示例程序介绍了Interpreter模式的Java实现，下面咱们试着跳出语言层面，抽象出Interpreter模式中登场的角色。</p><p><strong>AbstractExpression(抽象表达式)</strong></p><p>定义结点的基本约束。在示例程序中，由Node类扮演这个角色。</p><p><strong>TerminalExpression(终结符表达式)</strong></p><p>即EBNF中的终结符表达式，在示例程序中，由PrimitiveCommandNode类扮演这个角色。</p><p><strong>NonterminalExpression(非终结符表达式)</strong></p><p>即EBNF中的非终结符表达式，在示例程序中，由ProgramNode类，CommandListNode类，CommandNode类，RepeatCommandNode类联袂扮演这个角色。</p><p><strong>Context(上下文)</strong></p><p>在示例程序中，由Context类扮演这个角色。</p><h1 id="迷你语言可以有哪些？"><a href="#迷你语言可以有哪些？" class="headerlink" title="迷你语言可以有哪些？"></a>迷你语言可以有哪些？</h1><p>其实说白了，只要功能允许，也就是语言A中所表述的实体在语言B中实际存在，那么就可以使用Interpreter模式将语言A至于语言B之上。下面列出的是几种常用和热门的。</p><p><strong>批处理语言</strong></p><p>也就是所谓的第二代语言。这种语言基本就是单词的拼接，能表达的含义远没有第三代语言多。但是在某些本来就不需要那么多含义的场景下，使用批处理语言会使程序”更纯粹”，反而有利于开发和维护。本文示例程序中设计的迷你语言即属于批处理语言。</p><p><strong>正则</strong></p><p>大多数主流语言都支持对正则语法的解析。实现细节虽然千差万别，但核心思想基本不出本文藩篱。</p><p><strong>自然语言</strong></p><p>自然语言的语义识别和语法树的构建是人工智能的关键技术之一。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在《图解设计模式》一书中，Interpreter模式被归入了第10部分&lt;a href=&quot;&quot;&gt;用类来表现&lt;/a&gt;。在GoF原书中，Interpreter模式则被归入了&lt;a href=&quot;&quot;&gt;行为型设计模式&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Java 设计模式" scheme="http://yoursite.com/categories/Java-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java 设计模式-22.Command模式</title>
    <link href="http://yoursite.com/2018/09/07/Java%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-22Command%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2018/09/07/Java 设计模式-22Command模式/</id>
    <published>2018-09-07T02:10:49.000Z</published>
    <updated>2018-09-07T11:12:19.765Z</updated>
    
    <content type="html"><![CDATA[<p>在《图解设计模式》一书中，Command模式被归入了第10部分<a href="">用类来表现</a>。在GoF原书中，Command模式则被归入了<a href="">行为型设计模式</a>。</p><a id="more"></a><h1 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h1><p>在<a href="">19.State模式</a>中，我们介绍了用类来描述状态。今天我们介绍另一个可以用类来描述的相对抽象的概念：命令。</p><p>宏观的说，一个类与其他类的关系可以归为两种：</p><ul><li>向其他类发出命令促使其他类发生变化。</li><li>接到来自其他类的指令自身发生变化。</li></ul><p>通常来说，系统只会记录变化的结果，而不会记录变化的过程。换句话说，当我们在某个时间点对系统进行查询时，通常只能查到系统在当前时间的静态状态，也就是因命令导致的结果，而无法查知变化的过程。虽然程序一般都会把这个过程记录在日志中，但从严格的意义上来讲，日志文件已经不属于系统本身了。</p><p>变化过程本身无法记录，但是如果我们将触发变化的命令作为对象记录下来呢？</p><p>假设我们要画一系列的点(这也是本文的示例程序，先简要描述下)，通常来说，我们会告诉绘图实例：在位置p1绘制一个半径为r1，颜色为c1的点！绘图实例就赶紧按要求画了一个点。我们再说：在位置p2绘制一个半径为r2，颜色为c2的点！绘图程序赶紧又画了一个。最终我们得到了绘制着两个点的画布。但是触发绘制这两个点的命令却丢失了：因为我们根本不曾记录。</p><p>如果我们将这两个命令记录下来，形成表示命令的实例：</p><ul><li>命令1：在位置p1绘制一个半径为r1，颜色为c1的点！</li><li>命令2：在位置p2绘制一个半径为r2，颜色为c2的点！</li></ul><p>这样我们便算是将一个抽象的变化存储为了相对具体的实体。一旦完成了存储，我们可做的事一下子就变多了：</p><ol><li>引入命令后，类A将从直接调用类B转化为制造一条命令，而后执行这条命令：这就使得类A与类B之间完成了解耦。</li><li>接上条，这种解耦并不仅仅是空间上的，同样还可以是时间上的，如果对命令结果的需求没那么迫切，类A完全可以只负责制造命令，而后就可以继续做自己的事了。这使得命令的执行变成了异步的。</li><li>继续接上条，一旦命令的执行变为异步，就意味着我们可以把待执行的命令存储起来，形成一个指令集。在需要的时候统一执行。</li><li><a href="">18.Memento模式</a>可以让我们进行存档与恢复。其做法就是把某个时间点的对象像拍照那样存储下来，而后在需要时再进行恢复；引入命令后，我们也可以做到类似的事，比如某实例最初处于初始状态，而后经过了命令1，2，3后变为了状态2。如果我们想要记录状态2，方法之一自然是使用<a href="">18.Memento模式</a>将状态2照下来。但我们同样也可以存储命令1，2，3。当我们需要状态2时，我们只需要再找一个处于初始状态的实例，而后再按顺序执行一遍命令1，2，3即可。</li><li>接上条，很显然，如果要使用命令集来制作存档的话，在恢复存档时通常要比拍快照更花时间。</li></ol><p>将这种”引入命令”的思想理论化后，得到的就是Command模式啦。有时，我们也会将命令称为事件(event)，它与”事件驱动编程”中的”事件”的含义是相同的。我们会在GUI编程中大量的用到事件：点击一次鼠标是一个事件，按下键盘上的一个按键是一个事件。而每个事件其实都可以视为一个指令，以促使系统发生相应的变化。</p><h1 id="示例程序需求分析"><a href="#示例程序需求分析" class="headerlink" title="示例程序需求分析"></a>示例程序需求分析</h1><p>下面我们就来设计一个应用了Command模式的小例子吧。这是一个使用Java Swing技术实现的画图小程序。启动时的初始面板为：</p><p><img src="/images/blog_pic/Java 设计模式/22Command模式/0.jpg" alt="0.jpg"></p><p>区域介绍：</p><p><img src="/images/blog_pic/Java 设计模式/22Command模式/1.jpg" alt="1.jpg"></p><p>默认画笔粗细为10(画笔形成的点的半径为10个像素)，默认颜色为黑色，在画布上按住鼠标左键拖动即可绘制图形。下图为使用初始参数绘制一条线：</p><p><img src="/images/blog_pic/Java 设计模式/22Command模式/2.jpg" alt="2.jpg"></p><p>然后我们调整画笔粗细为5，颜色为绿，在线的下面再画一个圈：</p><p><img src="/images/blog_pic/Java 设计模式/22Command模式/3.jpg" alt="3.jpg"></p><p>点击”清空”按钮后，画布会被清空。不过画笔颜色及粗细不会恢复为默认值。例如我们可以撤销部分绘制圆的操作：</p><p><img src="/images/blog_pic/Java 设计模式/22Command模式/4.jpg" alt="4.jpg"></p><p>点击”撤销”按钮可以让我们撤销一次操作，即取消绘制一个点。不过并不会撤销对画笔颜色及粗细的选择。</p><p>点击”保存”按钮可以将当前画布上的图形保存到文件中。此后可以通过点击”读取”按钮恢复此前保存的图形。</p><p>功能基本就是这么多，最后附上一幅我用这个程序画的一幢好丑好丑的房子，哈哈哈：</p><p><img src="/images/blog_pic/Java 设计模式/22Command模式/5.jpg" alt="5.jpg"></p><h1 id="示例程序"><a href="#示例程序" class="headerlink" title="示例程序"></a>示例程序</h1><p>本程序中的所有代码将被统一置于design22包下，结构如下：</p><p><img src="/images/blog_pic/Java 设计模式/22Command模式/6.jpg" alt="6.jpg"></p><p>下面将逐个贴出每个类的源码。</p><p>首先介绍command包里的类，顾名思义，这个包下自然全都是命令啦。</p><p><strong>Command接口</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package design22.command;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">public interface Command &#123;</span><br><span class="line"></span><br><span class="line">    void execute();</span><br><span class="line"></span><br><span class="line">    List&lt;String&gt; strList();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Command是最顶层的命令接口。内部只有两个方法。其中execute()表示执行命令。而strList()则会将命令转换为字符串以用于存档。之所以返回类型是List，是因为实际实现Command接口的命令有可能并非单独一条指令，而是一个指令集。</p><p><strong>MacroCommand类</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line">package design22.command;</span><br><span class="line"></span><br><span class="line">import java.awt.Color;</span><br><span class="line">import java.awt.Point;</span><br><span class="line">import java.io.BufferedReader;</span><br><span class="line">import java.io.BufferedWriter;</span><br><span class="line">import java.io.File;</span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.FileOutputStream;</span><br><span class="line">import java.io.InputStreamReader;</span><br><span class="line">import java.io.OutputStreamWriter;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.Iterator;</span><br><span class="line">import java.util.List;</span><br><span class="line">import java.util.Stack;</span><br><span class="line"></span><br><span class="line">import org.apache.commons.lang.StringUtils;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line">import design22.view.MyCanvas;</span><br><span class="line"></span><br><span class="line">public class MacroCommand implements Command &#123;</span><br><span class="line"></span><br><span class="line">    private Stack&lt;Command&gt; commands = new Stack&lt;Command&gt;();</span><br><span class="line"></span><br><span class="line">    private static final String SAVE = &quot;src/main/java/design22/save/save.txt&quot;;</span><br><span class="line"></span><br><span class="line">    private static final String ENCODING = &quot;UTF-8&quot;;</span><br><span class="line"></span><br><span class="line">    private MyCanvas canvas;</span><br><span class="line"></span><br><span class="line">    public MacroCommand(MyCanvas canvas) &#123;</span><br><span class="line">        this.canvas = canvas;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void execute() &#123;</span><br><span class="line">        Iterator&lt;Command&gt; iterator = this.commands.iterator();</span><br><span class="line">        while (iterator.hasNext()) iterator.next().execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void append(Command cmd) &#123;</span><br><span class="line">        if (this != cmd) this.commands.push(cmd);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void clear() &#123;</span><br><span class="line">        this.commands.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void undo() &#123;</span><br><span class="line">        if (!this.commands.isEmpty()) this.commands.pop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void save() &#123;</span><br><span class="line">        List&lt;String&gt; data = this.strList();</span><br><span class="line">        FileOutputStream fo = null;</span><br><span class="line">        OutputStreamWriter ow = null;</span><br><span class="line">        BufferedWriter bw = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            fo = new FileOutputStream(new File(MacroCommand.SAVE));</span><br><span class="line">            ow = new OutputStreamWriter(fo, MacroCommand.ENCODING);</span><br><span class="line">            bw = new BufferedWriter(ow);</span><br><span class="line">            for (String str : data) &#123;</span><br><span class="line">                bw.write(str);</span><br><span class="line">                bw.newLine();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                bw.close();</span><br><span class="line">                ow.close();</span><br><span class="line">                fo.close();</span><br><span class="line">            &#125; catch (Exception ef) &#123;</span><br><span class="line">                ef.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;String&gt; strList() &#123;</span><br><span class="line">        List&lt;String&gt; list = new ArrayList&lt;String&gt;();</span><br><span class="line">        Iterator&lt;Command&gt; iterator = this.commands.iterator();</span><br><span class="line">        while (iterator.hasNext()) list.addAll(iterator.next().strList());</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void load() &#123;</span><br><span class="line">        this.clear();</span><br><span class="line">        this.canvas.init();</span><br><span class="line">        FileInputStream fi = null;</span><br><span class="line">        InputStreamReader ir = null;</span><br><span class="line">        BufferedReader br = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            fi = new FileInputStream(new File(MacroCommand.SAVE));</span><br><span class="line">            ir = new InputStreamReader(fi, MacroCommand.ENCODING);</span><br><span class="line">            br = new BufferedReader(ir);</span><br><span class="line">            String lineTxt = null;</span><br><span class="line">            while (!StringUtils.isBlank((lineTxt = br.readLine()))) &#123;</span><br><span class="line">                JSONObject jo = JSONObject.parseObject(lineTxt);</span><br><span class="line">                String className = jo.get(&quot;type&quot;).toString();</span><br><span class="line">                Command cmd = null;</span><br><span class="line">                if (DrawCommand.class.getName().equals(className)) &#123;</span><br><span class="line">                    cmd = new DrawCommand(this.canvas, new Point(Integer.parseInt(jo.get(&quot;pointX&quot;).toString()), Integer.parseInt(jo.get(&quot;pointY&quot;).toString())));</span><br><span class="line">                &#125; else if (ColorCommand.class.getName().equals(className)) &#123;</span><br><span class="line">                    cmd = new ColorCommand(this.canvas, new Color(Integer.parseInt(jo.get(&quot;colorRGB&quot;).toString())));</span><br><span class="line">                &#125; else if (BrushCommand.class.getName().equals(className)) &#123;</span><br><span class="line">                    cmd = new BrushCommand(this.canvas, Integer.parseInt(jo.get(&quot;brushWidth&quot;).toString()));</span><br><span class="line">                &#125;</span><br><span class="line">                if (null != cmd) this.append(cmd);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; finally &#123;</span><br><span class="line">            try &#123;</span><br><span class="line">                br.close();</span><br><span class="line">                ir.close();</span><br><span class="line">                fi.close();</span><br><span class="line">            &#125; catch (Exception ef) &#123;</span><br><span class="line">                ef.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MacroCommand类就是前文提到的，实现了Command接口的指令集。其最核心的字段就是commands了。对于这个字段，我们有两点需要说明：</p><ol><li>之所以声明为栈，是为了便于进行撤销操作。</li><li>栈的泛型类型是Command，而MacroCommand类本身又实现了Command接口。这意味着commands字段中同样可以添加MacroCommand类型的数据。也就是说，指令集中的某条指令同样可以是另一个指令集，这在MacroCommand类execute()中也有所体现：最终我们是使用递归执行栈中的所有指令的(为防止无限递归下去，我们禁止将自身添加到commands字段中)。这其实是对<a href="">11.Composite模式</a>的一种应用。</li></ol><p>commands是本程序中最核心的字段，其中存储了所有的指令。程序做的所有操作最终其实都是在操作这个字段：</p><ul><li>清空画布：即清空commands字段。而后按照commands字段重绘图形，因为commands已被清空，自然就起到了清空画布的效果。</li><li>撤销最后一次操作：弹出最后一条指令，而后按照commands字段重绘图形，因为最后一条指令已被弹出，自然就相当于撤销操作了。</li><li>保存：将commands中的命令按顺序存储入文件。</li><li>读取：将文件中的命令按顺序读取入commands字段，而后依commands重绘图形，起到读档的作用。</li></ul><p><strong>DrawCommand类</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">package design22.command;</span><br><span class="line"></span><br><span class="line">import java.awt.Point;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line">import design22.view.MyCanvas;</span><br><span class="line"></span><br><span class="line">public class DrawCommand implements Command &#123;</span><br><span class="line"></span><br><span class="line">    private MyCanvas canvas;</span><br><span class="line"></span><br><span class="line">    private Point point;</span><br><span class="line"></span><br><span class="line">    public DrawCommand(MyCanvas canvas, Point point) &#123;</span><br><span class="line">        this.canvas = canvas;</span><br><span class="line">        this.point = point;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void execute() &#123;</span><br><span class="line">        this.canvas.draw(this.point);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;String&gt; strList() &#123;</span><br><span class="line">        List&lt;String&gt; list = new ArrayList&lt;String&gt;(1);</span><br><span class="line">        JSONObject jo = new JSONObject();</span><br><span class="line">        jo.put(&quot;type&quot;, DrawCommand.class.getName());</span><br><span class="line">        jo.put(&quot;pointX&quot;, this.point.x);</span><br><span class="line">        jo.put(&quot;pointY&quot;, this.point.y);</span><br><span class="line">        list.add(jo.toJSONString());</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>命令：在画布特定的位置上绘制一个点。</p><p><strong>ColorCommand类</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">package design22.command;</span><br><span class="line"></span><br><span class="line">import java.awt.Color;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line">import design22.view.MyCanvas;</span><br><span class="line"></span><br><span class="line">public class ColorCommand implements Command &#123;</span><br><span class="line"></span><br><span class="line">    private MyCanvas canvas;</span><br><span class="line"></span><br><span class="line">    private Color color;</span><br><span class="line"></span><br><span class="line">    public ColorCommand(MyCanvas canvas, Color color) &#123;</span><br><span class="line">        this.canvas = canvas;</span><br><span class="line">        this.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void execute() &#123;</span><br><span class="line">        this.canvas.setColor(this.color);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;String&gt; strList() &#123;</span><br><span class="line">        List&lt;String&gt; list = new ArrayList&lt;String&gt;(1);</span><br><span class="line">        JSONObject jo = new JSONObject();</span><br><span class="line">        jo.put(&quot;type&quot;, ColorCommand.class.getName());</span><br><span class="line">        jo.put(&quot;colorRGB&quot;, this.color.getRGB());</span><br><span class="line">        list.add(jo.toJSONString());</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>命令：将画笔变更为特定的颜色。</p><p><strong>BrushCommand类</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">package design22.command;</span><br><span class="line"></span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import com.alibaba.fastjson.JSONObject;</span><br><span class="line"></span><br><span class="line">import design22.view.MyCanvas;</span><br><span class="line"></span><br><span class="line">public class BrushCommand implements Command &#123;</span><br><span class="line"></span><br><span class="line">    private MyCanvas canvas;</span><br><span class="line"></span><br><span class="line">    private int width;</span><br><span class="line"></span><br><span class="line">    public BrushCommand(MyCanvas canvas, int width) &#123;</span><br><span class="line">        this.canvas = canvas;</span><br><span class="line">        this.width = width;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void execute() &#123;</span><br><span class="line">        this.canvas.setR(this.width);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public List&lt;String&gt; strList() &#123;</span><br><span class="line">        List&lt;String&gt; list = new ArrayList&lt;String&gt;(1);</span><br><span class="line">        JSONObject jo = new JSONObject();</span><br><span class="line">        jo.put(&quot;type&quot;, BrushCommand.class.getName());</span><br><span class="line">        jo.put(&quot;brushWidth&quot;, this.width);</span><br><span class="line">        list.add(jo.toJSONString());</span><br><span class="line">        return list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>命令：将画笔变更为特定的粗细。</p><p>然后是view包：</p><p><strong>MyCanvas类</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">package design22.view;</span><br><span class="line"></span><br><span class="line">import java.awt.Canvas;</span><br><span class="line">import java.awt.Color;</span><br><span class="line">import java.awt.Graphics;</span><br><span class="line">import java.awt.Point;</span><br><span class="line"></span><br><span class="line">import design22.command.MacroCommand;</span><br><span class="line"></span><br><span class="line">public class MyCanvas extends Canvas &#123;</span><br><span class="line"></span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line"></span><br><span class="line">    private static final Color DEF_COLOR = Color.BLACK;</span><br><span class="line"></span><br><span class="line">    private static final int DEF_R = 10;</span><br><span class="line"></span><br><span class="line">    Color color = MyCanvas.DEF_COLOR;</span><br><span class="line"></span><br><span class="line">    int r = MyCanvas.DEF_R;</span><br><span class="line"></span><br><span class="line">    MacroCommand history = new MacroCommand(this);</span><br><span class="line"></span><br><span class="line">    public MyCanvas(int width, int height) &#123;</span><br><span class="line">        this.setSize(width, height);</span><br><span class="line">        this.setBackground(Color.WHITE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void paint(Graphics g) &#123;</span><br><span class="line">        this.init();</span><br><span class="line">        this.history.execute();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void draw(Point point) &#123;</span><br><span class="line">        Graphics g = this.getGraphics();</span><br><span class="line">        g.setColor(this.color);</span><br><span class="line">        g.fillOval(point.x - this.r, point.y - this.r, 2 * this.r, 2 * this.r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setColor(Color color) &#123;</span><br><span class="line">        this.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setR(int r) &#123;</span><br><span class="line">        this.r = r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void init() &#123;</span><br><span class="line">        this.color = MyCanvas.DEF_COLOR;</span><br><span class="line">        this.r = MyCanvas.DEF_R;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>即为自己实现的画板类。</p><p><strong>View类</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></td><td class="code"><pre><span class="line">package design22.view;</span><br><span class="line"></span><br><span class="line">import java.awt.Color;</span><br><span class="line">import java.awt.event.ActionEvent;</span><br><span class="line">import java.awt.event.ActionListener;</span><br><span class="line">import java.awt.event.MouseEvent;</span><br><span class="line">import java.awt.event.MouseMotionAdapter;</span><br><span class="line">import java.awt.event.WindowAdapter;</span><br><span class="line">import java.awt.event.WindowEvent;</span><br><span class="line">import java.util.ArrayList;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import javax.swing.Box;</span><br><span class="line">import javax.swing.BoxLayout;</span><br><span class="line">import javax.swing.ButtonGroup;</span><br><span class="line">import javax.swing.JButton;</span><br><span class="line">import javax.swing.JCheckBox;</span><br><span class="line">import javax.swing.JFrame;</span><br><span class="line"></span><br><span class="line">import design22.command.BrushCommand;</span><br><span class="line">import design22.command.ColorCommand;</span><br><span class="line">import design22.command.Command;</span><br><span class="line">import design22.command.DrawCommand;</span><br><span class="line"></span><br><span class="line">public class View extends JFrame implements ActionListener &#123;</span><br><span class="line"></span><br><span class="line">    private static final long serialVersionUID = 1L;</span><br><span class="line"></span><br><span class="line">    MyCanvas canvas = new MyCanvas(50 * 16, 50 * 9);</span><br><span class="line"></span><br><span class="line">    private int maxBrush = 20;</span><br><span class="line"></span><br><span class="line">    private List&lt;JCheckBox&gt; brushBoxs = new ArrayList&lt;JCheckBox&gt;();</span><br><span class="line"></span><br><span class="line">    private List&lt;ColorBox&gt; colorBoxs = new ArrayList&lt;ColorBox&gt;();</span><br><span class="line"></span><br><span class="line">    private List&lt;JButton&gt; buttons = new ArrayList&lt;JButton&gt;();</span><br><span class="line"></span><br><span class="line">    public View() &#123;</span><br><span class="line">        // 制作按钮</span><br><span class="line">        this.buttons.add(new JButton(&quot;清空&quot;));</span><br><span class="line">        this.buttons.add(new JButton(&quot;撤销&quot;));</span><br><span class="line">        this.buttons.add(new JButton(&quot;保存&quot;));</span><br><span class="line">        this.buttons.add(new JButton(&quot;读取&quot;));</span><br><span class="line">        for (JButton button : this.buttons) button.addActionListener(this);</span><br><span class="line">        // 制作颜色CheckBox</span><br><span class="line">        this.colorBoxs.add(new ColorBox(Color.BLACK, &quot;黑&quot;, this));</span><br><span class="line">        this.colorBoxs.add(new ColorBox(Color.DARK_GRAY, &quot;深灰&quot;, this));</span><br><span class="line">        this.colorBoxs.add(new ColorBox(Color.GRAY, &quot;灰&quot;, this));</span><br><span class="line">        this.colorBoxs.add(new ColorBox(Color.LIGHT_GRAY, &quot;浅灰&quot;, this));</span><br><span class="line">        this.colorBoxs.add(new ColorBox(Color.BLUE, &quot;蓝&quot;, this));</span><br><span class="line">        this.colorBoxs.add(new ColorBox(Color.CYAN, &quot;青&quot;, this));</span><br><span class="line">        this.colorBoxs.add(new ColorBox(Color.GREEN, &quot;绿&quot;, this));</span><br><span class="line">        this.colorBoxs.add(new ColorBox(Color.MAGENTA, &quot;洋红&quot;, this));</span><br><span class="line">        this.colorBoxs.add(new ColorBox(Color.RED, &quot;红&quot;, this));</span><br><span class="line">        this.colorBoxs.add(new ColorBox(Color.PINK, &quot;粉&quot;, this));</span><br><span class="line">        this.colorBoxs.add(new ColorBox(Color.ORANGE, &quot;橘&quot;, this));</span><br><span class="line">        this.colorBoxs.add(new ColorBox(Color.YELLOW, &quot;黄&quot;, this));</span><br><span class="line">        ButtonGroup colorGroup = new ButtonGroup();</span><br><span class="line">        for (ColorBox colorBox : this.colorBoxs) &#123;</span><br><span class="line">            colorBox.checkBox.addActionListener(this);</span><br><span class="line">            colorGroup.add(colorBox.checkBox);</span><br><span class="line">        &#125;</span><br><span class="line">        // 制作画笔CheckBox</span><br><span class="line">        ButtonGroup brushGroup = new ButtonGroup();</span><br><span class="line">        for (int i = 1; i &lt;= this.maxBrush; i++) &#123;</span><br><span class="line">            JCheckBox brushCheckBox = new JCheckBox(i + &quot;&quot;, i == this.canvas.r);</span><br><span class="line">            this.brushBoxs.add(brushCheckBox);</span><br><span class="line">            brushCheckBox.addActionListener(this);</span><br><span class="line">            brushGroup.add(brushCheckBox);</span><br><span class="line">        &#125;</span><br><span class="line">        // 画布拖动监听</span><br><span class="line">        this.canvas.addMouseMotionListener(</span><br><span class="line">            new MouseMotionAdapter() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void mouseDragged(MouseEvent e) &#123;</span><br><span class="line">                    Command cmd = new DrawCommand(View.this.canvas, e.getPoint());</span><br><span class="line">                    View.this.canvas.history.append(cmd);</span><br><span class="line">                    cmd.execute();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">        // 布局</span><br><span class="line">        Box firstBox = new Box(BoxLayout.X_AXIS);</span><br><span class="line">        for (JButton button : this.buttons) firstBox.add(button);</span><br><span class="line">        Box secondBox = new Box(BoxLayout.X_AXIS);</span><br><span class="line">        Box brushBox = new Box(BoxLayout.Y_AXIS);</span><br><span class="line">        for (JCheckBox temp : this.brushBoxs) brushBox.add(temp);</span><br><span class="line">        secondBox.add(brushBox);</span><br><span class="line">        secondBox.add(this.canvas);</span><br><span class="line">        Box colorBox = new Box(BoxLayout.Y_AXIS);</span><br><span class="line">        for (ColorBox temp : this.colorBoxs) colorBox.add(temp.checkBox);</span><br><span class="line">        secondBox.add(colorBox);</span><br><span class="line">        Box mainBox = new Box(BoxLayout.Y_AXIS);</span><br><span class="line">        mainBox.add(firstBox);</span><br><span class="line">        mainBox.add(secondBox);</span><br><span class="line">        super.getContentPane().add(mainBox);</span><br><span class="line">        // 关闭</span><br><span class="line">        this.addWindowListener(</span><br><span class="line">            new WindowAdapter() &#123;</span><br><span class="line">                @Override</span><br><span class="line">                public void windowClosing(WindowEvent e) &#123;</span><br><span class="line">                    System.exit(0);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        );</span><br><span class="line">        // 显示</span><br><span class="line">        super.pack();</span><br><span class="line">        super.setVisible(true);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public void actionPerformed(ActionEvent e) &#123;</span><br><span class="line">        for (JButton button : this.buttons) &#123;</span><br><span class="line">            if (e.getSource() == button) &#123;</span><br><span class="line">                if (&quot;清空&quot;.equals(button.getText())) &#123;</span><br><span class="line">                    this.canvas.history.clear();</span><br><span class="line">                    this.canvas.repaint();</span><br><span class="line">                &#125; else if (&quot;撤销&quot;.equals(button.getText())) &#123;</span><br><span class="line">                    this.canvas.history.undo();</span><br><span class="line">                    this.canvas.repaint();</span><br><span class="line">                &#125; else if (&quot;保存&quot;.equals(button.getText())) &#123;</span><br><span class="line">                    this.canvas.history.save();</span><br><span class="line">                &#125; else if (&quot;读取&quot;.equals(button.getText())) &#123;</span><br><span class="line">                    this.canvas.history.load();</span><br><span class="line">                    this.canvas.repaint();</span><br><span class="line">                &#125;</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for (ColorBox colorBox : this.colorBoxs) &#123;</span><br><span class="line">            if (e.getSource() == colorBox.checkBox) &#123;</span><br><span class="line">                Command cmd = new ColorCommand(this.canvas, colorBox.color);</span><br><span class="line">                this.canvas.history.append(cmd);</span><br><span class="line">                cmd.execute();</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        for (JCheckBox brushBox : this.brushBoxs) &#123;</span><br><span class="line">            if (e.getSource() == brushBox) &#123;</span><br><span class="line">                Command cmd = new BrushCommand(this.canvas, Integer.parseInt(brushBox.getText()));</span><br><span class="line">                this.canvas.history.append(cmd);</span><br><span class="line">                cmd.execute();</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ColorBox &#123;</span><br><span class="line"></span><br><span class="line">    Color color;</span><br><span class="line"></span><br><span class="line">    JCheckBox checkBox;</span><br><span class="line"></span><br><span class="line">    String desc;</span><br><span class="line"></span><br><span class="line">    ColorBox (Color color, String desc, View view) &#123;</span><br><span class="line">        this.color = color;</span><br><span class="line">        this.checkBox = new JCheckBox(desc, this.color == view.canvas.color);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>View负责创建及调用命令。方式主要有两种。</p><p>第一种为创建命令并直接调用。以切换颜色为例，会触发actionPerformed()监听事件。从代码中可以看到，我们会创建并直接执行命令。当然，我们也会将该命令存入MacroCommand类的commands字段中，以形成存档，View作为面板，每个实例都会创建并绑定一个MyCanvas(画布)类的实例，而每一个画布，同样会创建并绑定一个MacroCommand类的实例：在MyCanvas中，这个MacroCommand被称为history。</p><p>第二种并不会创建新命令，但会导致commands中的已有命令会被重新全部执行一遍。例如当我们按下”撤销”按钮后，会触发actionPerformed()方法。其中undo()会导致commands中最新的命令被弹出，而repaint()则会先清空画布，而后将commands中剩余的命令重新执行一遍。</p><p><strong>save.txt</strong></p><p>我们会在save包下存放存档。该存档只有一份，反复存档只会导致存档覆盖。因为拖动时每一个点都会生成1条命令，因此这个文件行数通常都会很多。上文绘制房子的那个存档文件就有16000+的行数。现只截取最开始的那部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;brushWidth&quot;:20,&quot;type&quot;:&quot;design22.command.BrushCommand&quot;&#125;</span><br><span class="line">&#123;&quot;colorRGB&quot;:-16711936,&quot;type&quot;:&quot;design22.command.ColorCommand&quot;&#125;</span><br><span class="line">&#123;&quot;pointX&quot;:4,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span><br><span class="line">&#123;&quot;pointX&quot;:6,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span><br><span class="line">&#123;&quot;pointX&quot;:8,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span><br><span class="line">&#123;&quot;pointX&quot;:10,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span><br><span class="line">&#123;&quot;pointX&quot;:13,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span><br><span class="line">&#123;&quot;pointX&quot;:16,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span><br><span class="line">&#123;&quot;pointX&quot;:20,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span><br><span class="line">&#123;&quot;pointX&quot;:25,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span><br><span class="line">&#123;&quot;pointX&quot;:29,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span><br><span class="line">&#123;&quot;pointX&quot;:32,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span><br><span class="line">&#123;&quot;pointX&quot;:35,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span><br><span class="line">&#123;&quot;pointX&quot;:37,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span><br><span class="line">&#123;&quot;pointX&quot;:40,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span><br><span class="line">&#123;&quot;pointX&quot;:42,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span><br><span class="line">&#123;&quot;pointX&quot;:45,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span><br><span class="line">&#123;&quot;pointX&quot;:48,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span><br><span class="line">&#123;&quot;pointX&quot;:52,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span><br><span class="line">&#123;&quot;pointX&quot;:54,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span><br><span class="line">&#123;&quot;pointX&quot;:56,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span><br><span class="line">&#123;&quot;pointX&quot;:60,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span><br><span class="line">&#123;&quot;pointX&quot;:63,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span><br><span class="line">&#123;&quot;pointX&quot;:67,&quot;pointY&quot;:411,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span><br><span class="line">&#123;&quot;pointX&quot;:72,&quot;pointY&quot;:412,&quot;type&quot;:&quot;design22.command.DrawCommand&quot;&#125;</span><br></pre></td></tr></table></figure><p>最后是直接位于design22包下的Main.java：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">package design22;</span><br><span class="line"></span><br><span class="line">import design22.view.View;</span><br><span class="line"></span><br><span class="line">public class Main &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        new View();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>执行该类后，即可启动程序。</p><h1 id="登场角色"><a href="#登场角色" class="headerlink" title="登场角色"></a>登场角色</h1><p>上面的示例程序介绍了Command模式的Java实现，下面咱们试着跳出语言层面，抽象出Command模式中登场的角色。</p><p><strong>Command(命令)</strong></p><p>在示例程序中，由Command接口扮演这个角色。</p><p><strong>ConcreteCommand(具体的命令)</strong></p><p>在示例程序中，由MacroCommand类，DrawCommand类，ColorCommand类，BrushCommand类联袂扮演这个角色。</p><p><strong>Receiver(接收者)</strong></p><p>接收命令，或是受命令影响的角色。在示例程序中，由MyCanvas类扮演这个角色。</p><p><strong>Invoker(发动者)</strong></p><p>Invoker是Command的触发者(通常也是创建者)。在示例程序中，由View类扮演这个角色。</p><h1 id="适配器"><a href="#适配器" class="headerlink" title="适配器"></a>适配器</h1><p>在此，我想说点与Command模式没什么关系的事。</p><p>在示例程序中，View实现监听的方式是写匿名的适配器类。例如我们在为画布添加拖动鼠标的监听时，是这样做的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">this.canvas.addMouseMotionListener(</span><br><span class="line">    new MouseMotionAdapter() &#123;</span><br><span class="line">        @Override</span><br><span class="line">        public void mouseDragged(MouseEvent e) &#123;</span><br><span class="line">            Command cmd = new DrawCommand(View.this.canvas, e.getPoint());</span><br><span class="line">            View.this.canvas.history.append(cmd);</span><br><span class="line">            cmd.execute();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>我们不妨稍微看下源码。这个this.canvas.addMouseMotionListener()的方法定义为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public synchronized void addMouseMotionListener(MouseMotionListener l)</span><br></pre></td></tr></table></figure><p>很显然，它接收一个MouseMotionListener类型的数据，而这个MouseMotionListener则是一个接口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">package java.awt.event;</span><br><span class="line"></span><br><span class="line">import java.util.EventListener;</span><br><span class="line"></span><br><span class="line">public interface MouseMotionListener extends EventListener &#123;</span><br><span class="line"></span><br><span class="line">    public void mouseDragged(MouseEvent e);</span><br><span class="line"></span><br><span class="line">    public void mouseMoved(MouseEvent e);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是MouseMotionListener接口的全部源码。其中mouseDragged()表示”按住鼠标拖动”这一事件；而mouseMoved()则表示鼠标移动事件。</p><p>那么自然，我们传入的这个MouseMotionAdapter就该实现MouseMotionListener啦，那么是不是呢：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">package java.awt.event;</span><br><span class="line"></span><br><span class="line">public abstract class MouseMotionAdapter implements MouseMotionListener &#123;</span><br><span class="line"></span><br><span class="line">    public void mouseDragged(MouseEvent e) &#123;&#125;</span><br><span class="line"></span><br><span class="line">    public void mouseMoved(MouseEvent e) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>代码不长，我就全部贴出了。可以看到，MouseMotionAdapter除了将接口中约束的两个方法声明非抽象的以外，实际上什么都没做。</p><p>其实比起这种使用匿名内部类，也就是适配器的做法，我们其实可以直接找一个类实现MouseMotionListener接口，然后将这个类的实例传给addMouseMotionListener()方法(通常来说，我们会让面板去实现这个接口，也就是说传入this)。那么二者各有什么利弊呢？</p><p>先说说使用匿名类的好处吧。如果要自己写一个类去实现监听接口，这就意味着必须要强制实现接口中所有约束的方法。例如，此时我们就必须实现mouseMoved()了，即便我们根本不关心鼠标移动事件，那也要写一个空方法放在那里才行。这在接口本身约束很多(例如WindowListener)，而实际用到的很少时尤其的麻烦：我们需要写大量的空方法，使得代码有失优雅。而使用适配器类则解决了这个问题。MouseMotionAdapter被声明为了抽象类，但其中并没有抽象方法。这样做的原因有二：类被声明为抽象的是不希望直接new出对象来，要写继承的子类才行；而方法均不是抽象的则让自己只需要重写需要的约束即可。</p><p>然后说一下继承接口的好处。使用匿名类的问题在于，每次使用都会初始化一个新的匿名类，在需要多次使用同一个监听时将会很不方便。如果专门弄一个类去监听，又显得小题大做。当然，直接让面板或其他组件更是糟糕的决策：从使用上讲，因为Java是单继承的语言，这会消耗掉宝贵的继承机会；另一方面，组件根本就不是监听器，也就是根本不符合里氏替换原则及合成聚合复用原则，从逻辑上更是说不通。因此，此时让面板直接实现接口就成为了最好的选择：View便直接实现了ActionListener，而后将需要此监听的按钮及选框均与其绑定。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在《图解设计模式》一书中，Command模式被归入了第10部分&lt;a href=&quot;&quot;&gt;用类来表现&lt;/a&gt;。在GoF原书中，Command模式则被归入了&lt;a href=&quot;&quot;&gt;行为型设计模式&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
      <category term="Java 设计模式" scheme="http://yoursite.com/categories/Java-%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
      <category term="设计模式" scheme="http://yoursite.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
